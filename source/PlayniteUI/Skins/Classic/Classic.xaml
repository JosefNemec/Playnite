<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:pc="clr-namespace:PlayniteUI.Controls;assembly=PlayniteUI"
                    xmlns:pcmd="clr-namespace:PlayniteUI.Commands;assembly=PlayniteUI"
                    xmlns:pui="clr-namespace:PlayniteUI;assembly=PlayniteUI"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:shared="clr-namespace:Playnite;assembly=Playnite"
                    mc:Ignorable="d" >

    <sys:String x:Key="SkinName">Classic</sys:String>

    <Color x:Key="BlackColor">#FF000000</Color>
    <Color x:Key="WhiteColor">#FFFFFFFF</Color>

    <Color x:Key="TextColor">#f2f2f2</Color>
    <Color x:Key="TextColorDarker">#a3a3a3</Color>
    <Color x:Key="TextColorDark">#000000</Color>
    <Color x:Key="MainColor">#4c4c4c</Color>
    <Color x:Key="MainColorDark">#252422</Color>
    <Color x:Key="HoverColor">#247BA0</Color>
    <Color x:Key="DefaultColor">#FF9BB1C5</Color>
    <Color x:Key="GlyphColor">#019fcb</Color>
    <Color x:Key="HighlightGlyphColor">#33019fcb</Color>
    <Color x:Key="PopupBackgroundColor">#171e26</Color>
    <Color x:Key="PopupBorderColor">#3e6184</Color>
    <Color x:Key="BackgroundToneColor">#182028</Color>

    <SolidColorBrush x:Key="ControlBackgroundBrush" Color="Transparent" />
    <SolidColorBrush x:Key="TextBrush" Color="{DynamicResource TextColor}" />
    <SolidColorBrush x:Key="TextBrushDarker" Color="{DynamicResource TextColorDarker}" />
    <SolidColorBrush x:Key="TextBrushDark" Color="{DynamicResource TextColorDark}" />
    <SolidColorBrush x:Key="NormalBrush" Color="{DynamicResource MainColor}" />
    <SolidColorBrush x:Key="NormalBrushDark" Color="{DynamicResource MainColorDark}" />
    <SolidColorBrush x:Key="NormalBorderBrush" Color="{DynamicResource MainColor}" />
    <SolidColorBrush x:Key="HoverBrush" Color="{DynamicResource HighlightGlyphColor}" />
    <SolidColorBrush x:Key="GlyphBrush" Color="{DynamicResource GlyphColor}" />
    <SolidColorBrush x:Key="HighlightGlyphBrush" Color="{DynamicResource HighlightGlyphColor}" />
    <SolidColorBrush x:Key="PopupBorderBrush" Color="{DynamicResource PopupBorderColor}" />
    <SolidColorBrush x:Key="TooltipBackgroundBrush" Color="{DynamicResource BackgroundToneColor}" />
    <SolidColorBrush x:Key="ButtonBackgroundBrush" Color="#1c1b19" />

    <sys:Double x:Key="FontSize">14</sys:Double>
    <FontFamily x:Key="FontFamily">Trebuchet MS</FontFamily>
    <Thickness x:Key="PopupBorderThickness">1</Thickness>
    <Thickness x:Key="ControlBorderThickness">1</Thickness>
    <sys:Double x:Key="EllipseBorderThickness">1</sys:Double>
    <CornerRadius x:Key="ControlCornerRadius">1</CornerRadius>

    <LinearGradientBrush  x:Key="PopupBackgroundBrush" StartPoint="0.4,0" EndPoint="0.5,1.2" >
        <GradientStop Color="{DynamicResource MainColorDark}" Offset="0"/>
        <GradientStop Color="{DynamicResource BackgroundToneColor}" Offset="0.9"/>
    </LinearGradientBrush>

    <LinearGradientBrush  x:Key="ExpanderBackgroundBrush" StartPoint="-1,0.5" EndPoint="1.5,1" >
        <GradientStop Color="{DynamicResource MainColor}" Offset="0"/>
        <GradientStop Color="{DynamicResource MainColorDark}" Offset="0.9"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="WindowBackgourndBrush" StartPoint="0.5,-0.2" EndPoint="0.4,1" >
        <GradientStop Color="#1F2933" Offset="0"/>
        <GradientStop Color="{DynamicResource MainColorDark}" Offset="0.4"/>
    </LinearGradientBrush>

    <sys:Double x:Key="GameCoverViewRation">1.4</sys:Double>

    <!--#region Standard Controls -->
    <Style TargetType="Border">
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style x:Key="HighlightBorder" TargetType="Border" BasedOn="{StaticResource {x:Type Border}}">
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BaseStyle" TargetType="Control">
        <Setter Property="FontSize" Value="{DynamicResource FontSize}" />
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BaseTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource FontSize}" />
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            CornerRadius="{DynamicResource ControlCornerRadius}" Style="{DynamicResource HighlightBorder}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="Border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator>
                        <BulletDecorator.Bullet>
                            <Border x:Name="BulletBorder" CornerRadius="{DynamicResource ControlCornerRadius}"
                                    BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                    Style="{DynamicResource HighlightBorder}" >
                                <Grid Width="18" Height="18" Background="{DynamicResource NormalBrushDark}">
                                    <Viewbox x:Name="CheckIcon" Visibility="Collapsed">
                                        <TextBlock Text="b" FontFamily="Marlett" Foreground="{DynamicResource GlyphBrush}"
                                                   HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </Viewbox>
                                    <Viewbox x:Name="IndeterminateIcon" Visibility="Collapsed" Margin="2">
                                        <TextBlock Text="g" FontFamily="Marlett" Foreground="{DynamicResource GlyphBrush}"
                                                   HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </Viewbox>
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                            <ContentPresenter RecognizesAccessKey="True" Margin="5,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                        </Border>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="{x:Null}" />
                                <Condition Property="IsThreeState" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="IndeterminateIcon"/>
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="CheckIcon" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="BulletBorder" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="BulletBorder" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator>
                        <BulletDecorator.Bullet>
                            <Border Background="Transparent">
                                <Grid Width="18" Height="18">
                                    <Ellipse x:Name="BulletBorder" Width="18" Height="18"
                                            Stroke="{DynamicResource NormalBorderBrush}"
                                            StrokeThickness="{DynamicResource EllipseBorderThickness}" />
                                    <Viewbox x:Name="CheckIcon" Visibility="Collapsed" >
                                        <TextBlock Text="h" FontFamily="Marlett" Foreground="{DynamicResource GlyphBrush}"
                                                    HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </Viewbox>
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                            <ContentPresenter RecognizesAccessKey="True" Margin="5,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                        </Border>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="CheckIcon" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" Value="{DynamicResource GlyphBrush}" TargetName="BulletBorder" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Stroke" Value="{DynamicResource GlyphBrush}" TargetName="BulletBorder" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource NormalBrushDark}" />
        <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            CornerRadius="{DynamicResource ControlCornerRadius}" Style="{DynamicResource HighlightBorder}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{DynamicResource NormalBrushDark}" />
        <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            CornerRadius="{DynamicResource ControlCornerRadius}" Style="{DynamicResource HighlightBorder}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="Border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Rectangle x:Name="HoverRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                   Width="Auto" Height="Auto" RadiusX="3" RadiusY="4"
                                   Stroke="{x:Null}" Margin="4.5,1,4.5,1" MinHeight="10"
                                   Fill="{TemplateBinding Background}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True" />
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" Value="{DynamicResource GlyphBrush}" TargetName="HoverRectangle" />
                        </Trigger>
                        <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType=ScrollViewer}}" Value="True">
                            <Setter Property="Fill" Value="{DynamicResource GlyphBrush}" TargetName="HoverRectangle" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Track x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="True"
                           Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                        <Track.Resources>
                            <sys:Double x:Key="{x:Static SystemParameters.VerticalScrollBarButtonHeightKey}">42</sys:Double>
                        </Track.Resources>
                        <Track.Thumb>
                            <Thumb />
                        </Track.Thumb>
                    </Track>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter Property="LayoutTransform" TargetName="PART_Track">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0"
                                                Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}"
                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                CanContentScroll="{TemplateBinding CanContentScroll}" />
                        <Rectangle Grid.Column="1" Grid.Row="1" Fill="{DynamicResource ControlBackgroundBrush}" />
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="0" Grid.Row="1"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" 
                                   Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal"
                                   AutomationProperties.AutomationId="HorizontalScrollBar" />
                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="1" Grid.Row="0"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical"
                                   AutomationProperties.AutomationId="VerticalScrollBar" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_VerticalScrollBar" Property="Visibility" Value="Visible">
                            <Setter Property="IsTabStop" Value="True"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="Padding" Value="2,1,2,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{DynamicResource ControlBackgroundBrush}" CornerRadius="{DynamicResource ControlCornerRadius}">
                        <ScrollViewer Padding="{TemplateBinding Padding}" Focusable="False"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                      CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Margin" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid>
                        <Border x:Name="HoverRectangle" IsHitTestVisible="False" Visibility="Collapsed"
                                Background="{DynamicResource HoverBrush}" CornerRadius="{DynamicResource ControlCornerRadius}" />
                        <Border x:Name="SelectedRectangle" IsHitTestVisible="False" Visibility="Collapsed"
                                Background="{DynamicResource GlyphBrush}" CornerRadius="{DynamicResource ControlCornerRadius}"/>
                        <Border Padding="{TemplateBinding Padding}" Background="Transparent">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="SelectedRectangle" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="SelectedRectangle" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="Selector.IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible" TargetName="HoverRectangle" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextBrushDark}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}" Background="{DynamicResource ExpanderBackgroundBrush}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="+" x:Name="UpArrow"
                                       VerticalAlignment="Center" HorizontalAlignment="Center"
                                       Style="{DynamicResource BaseTextBlockStyle}"
                                       Foreground="{DynamicResource GlyphBrush}" FontSize="18" MinWidth="20" FontWeight="Bold" Margin="5,0,5,0"
                                       Grid.Column="0" TextAlignment="Center" />
                            <TextBlock Text="-" x:Name="DownArrow"
                                       VerticalAlignment="Center" HorizontalAlignment="Center"
                                       Style="{DynamicResource BaseTextBlockStyle}"
                                       Foreground="{DynamicResource GlyphBrush}" FontSize="18" MinWidth="20" FontWeight="Bold" Margin="5,0,5,0"
                                       Visibility="Collapsed"
                                       Grid.Column="0" TextAlignment="Center"/>
                            <ContentPresenter Grid.Column="1" VerticalAlignment="Center"
                                              SnapsToDevicePixels="True" HorizontalAlignment="Stretch" RecognizesAccessKey="True"  />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="DownArrow" Value="Visible" />
                            <Setter Property="Visibility" TargetName="UpArrow" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="0.75" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Expander}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <DockPanel>
                        <ToggleButton BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                      Style="{DynamicResource ExpanderDownHeaderStyle}"
                                      Padding="{TemplateBinding Padding}"                                      
                                      MinHeight="25" DockPanel.Dock="Top" Background="Transparent"                                      
                                      Content="{TemplateBinding Header}"
                                      IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border x:Name="Border" DockPanel.Dock="Top" Visibility="Collapsed" 
                                BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter Focusable="False"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  />
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="Border" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource ControlCornerRadius}"
                            Style="{DynamicResource HighlightBorder}">
                        <Grid>
                            <ToggleButton x:Name="ToggleButton" Focusable="False" ClickMode="Press" Margin="0,0,2,0"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <DockPanel LastChildFill="False" Background="Transparent">
                                            <Viewbox DockPanel.Dock="Right" Width="20" >
                                                <TextBlock Text="6" FontFamily="Marlett" Foreground="{DynamicResource GlyphBrush}"
                                                           VerticalAlignment="Center"/>
                                            </Viewbox>
                                        </DockPanel>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>
                            <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Left" VerticalAlignment="Center"
                                              Margin="5,0,25,0" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}"
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                            <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" VerticalAlignment="Center"
                                     HorizontalAlignment="Stretch" Margin="0,0,25,0" Focusable="True"
                                     BorderThickness="0" Background="{TemplateBinding Background}"
                                     IsReadOnly="{TemplateBinding IsReadOnly}" Foreground="{DynamicResource TextBrush}">
                            </TextBox>
                            <Popup x:Name="Popup" IsOpen="{TemplateBinding IsDropDownOpen}"
                                   Placement="Bottom" Focusable="False" AllowsTransparency="True">
                                <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                    <Border BorderBrush="{DynamicResource PopupBorderBrush}"
                                            BorderThickness="{DynamicResource PopupBorderThickness}"
                                            Background="{DynamicResource PopupBackgroundBrush}">
                                        <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </Border>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="Border" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox" />
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid>
                        <Rectangle x:Name="HoverRectangle" IsHitTestVisible="False" Visibility="Collapsed" Fill="{DynamicResource HoverBrush}" />
                        <Rectangle x:Name="SelectedRectangle" IsHitTestVisible="False" Visibility="Collapsed" Fill="{DynamicResource GlyphBrush}" />
                        <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                            <ContentPresenter VerticalAlignment="Center" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="HoverRectangle" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="HoverRectangle" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="SelectedRectangle" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextBrushDark}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrushDark}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}"/>
        <Setter Property="Height" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource NormalBorderBrush}"
                            CornerRadius="{DynamicResource ControlCornerRadius}">
                        <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Rectangle Fill="{TemplateBinding Background}" />
                            <Rectangle Name="PART_Track" Margin="0" />
                            <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" VerticalAlignment="Stretch">
                                <Grid>
                                    <Rectangle Fill="{TemplateBinding Foreground}" />
                                    <Grid x:Name="Animation" Visibility="Hidden">
                                        <Rectangle Fill="{TemplateBinding Background}" Margin="0,0,50,0">
                                            <Rectangle.RenderTransform>
                                                <ScaleTransform x:Name="HiderPreTransform" ScaleX="0"/>
                                            </Rectangle.RenderTransform>
                                        </Rectangle>
                                        <Rectangle Fill="{TemplateBinding Background}" RenderTransformOrigin="1, 0" Margin="50,0,0,0">
                                            <Rectangle.RenderTransform>
                                                <ScaleTransform x:Name="HiderPostTransform" ScaleX="1" />
                                            </Rectangle.RenderTransform>
                                        </Rectangle>
                                    </Grid>
                                </Grid>
                            </Decorator>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Setter TargetName="Animation" Property="Visibility" Value="Visible" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimation Storyboard.TargetName="HiderPreTransform" Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                                         To="1" Duration="0:00:4" AutoReverse="True"/>
                                        <DoubleAnimation Storyboard.TargetName="HiderPostTransform" Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                                         To="0" Duration="0:00:4" AutoReverse="True"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="CaretBrush" Value="{DynamicResource TextBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" CornerRadius="{DynamicResource ControlCornerRadius}"
                            Style="{DynamicResource HighlightBorder}">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
                                      HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="Border" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Opacity" Value="0.8"  />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="CaretBrush" Value="{DynamicResource TextBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" CornerRadius="{DynamicResource ControlCornerRadius}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ScrollViewer x:Name="PART_ContentHost" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="Border" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="Border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type RichTextBox}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="CaretBrush" Value="{DynamicResource TextBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RichTextBox}">
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" CornerRadius="{DynamicResource ControlCornerRadius}"
                            Style="{DynamicResource HighlightBorder}">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
                                      HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="Border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Label}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <ContentPresenter RecognizesAccessKey="True"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Popup}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="AllowsTransparency" Value="True" />
    </Style>

    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource PopupBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource PopupBorderThickness}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Menu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Menu">
                    <StackPanel Orientation="Horizontal" IsItemsHost="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border">
            <Grid>
                <Border x:Name="HoverBorder" Background="{DynamicResource HoverBrush}" Visibility="Collapsed"  />
                <TextBlock VerticalAlignment="Center" Padding="5" Style="{DynamicResource BaseTextBlockStyle}"
                           Foreground="{TemplateBinding Foreground}">
                    <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" />
                </TextBlock>
                <Popup Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False">
                    <Border SnapsToDevicePixels="True" BorderBrush="{DynamicResource PopupBorderBrush}"
                            Background="{DynamicResource PopupBackgroundBrush}" BorderThickness="{DynamicResource PopupBorderThickness}">
                        <StackPanel Grid.IsSharedSizeScope="True" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="HoverBorder" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TopLevelItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderBrush="{DynamicResource PopupBorderBrush}"
                Background="{DynamicResource PopupBackgroundBrush}" BorderThickness="{DynamicResource PopupBorderThickness}">
            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" />
        </Border>
    </ControlTemplate>

    <!-- SubmenuHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                <ColumnDefinition Width="*" SharedSizeGroup="MenuItemIGTColumnGroup" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemShortcutColumnGroup" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border x:Name="HoverBorder" Grid.Column="0" Grid.ColumnSpan="4" 
                    Background="{DynamicResource HoverBrush}" Visibility="Collapsed"  />
            <ContentPresenter x:Name="Icon" Grid.Column="0" Margin="4,0,-5,0"
                              VerticalAlignment="Center" ContentSource="Icon" />
            <Grid x:Name="GlyphPanel" Grid.Column="0" Visibility="Collapsed"
                  Margin="5,0,-5,0" VerticalAlignment="Center">
                <TextBlock FontFamily="Marlett" Text="a" VerticalAlignment="Center" Style="{DynamicResource BaseTextBlockStyle}" />
            </Grid>
            <TextBlock Grid.Column="1" Padding="5" VerticalAlignment="Center" Style="{DynamicResource BaseTextBlockStyle}"
                       Foreground="{TemplateBinding Foreground}">
                <ContentPresenter RecognizesAccessKey="True" Margin="5,0,5,0" ContentSource="Header"/>
            </TextBlock>
            <TextBlock x:Name="GestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}"
                       TextAlignment="Left" HorizontalAlignment="Stretch" Margin="20,5,10,5"
                       VerticalAlignment="Center" Background="Transparent"/>
            <Grid Grid.Column="3" Margin="0,0,5,0">
                <TextBlock FontFamily="Marlett" Text="4" VerticalAlignment="Center" Style="{DynamicResource BaseTextBlockStyle}" />
            </Grid>
            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right"
                   Focusable="False" AllowsTransparency="True">
                <Border BorderBrush="{DynamicResource PopupBorderBrush}" Background="{DynamicResource PopupBackgroundBrush}"
                        BorderThickness="{DynamicResource PopupBorderThickness}">
                    <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                        <StackPanel Grid.IsSharedSizeScope="True" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </ScrollViewer>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel" />
                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="HoverBorder" />
            </Trigger>
            <Trigger Property="InputGestureText" Value="">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GestureText" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="HoverBorder" Background="{DynamicResource HoverBrush}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                    <ColumnDefinition Width="*" SharedSizeGroup="MenuItemIGTColumnGroup" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemShortcutColumnGroup" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Grid.Column="0" Margin="4,0,-5,0" VerticalAlignment="Center" ContentSource="Icon" />
                <Grid x:Name="GlyphPanel" Grid.Column="0" Visibility="Collapsed" Margin="5,0,-5,0" VerticalAlignment="Center">
                    <TextBlock FontFamily="Marlett" Text="a" VerticalAlignment="Center" Style="{DynamicResource BaseTextBlockStyle}" />
                </Grid>
                <TextBlock VerticalAlignment="Center" Grid.Column="1" Margin="5,0,5,0" Padding="5" Style="{DynamicResource BaseTextBlockStyle}"
                           Foreground="{TemplateBinding Foreground}">
                    <ContentPresenter RecognizesAccessKey="True" ContentSource="Header"/>
                </TextBlock>
                <TextBlock x:Name="GestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}"
                           TextAlignment="Left" HorizontalAlignment="Stretch"
                           VerticalAlignment="Center" Margin="20,5,10,5" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel" />
                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="False">
                <Setter Property="Background" Value="Transparent" TargetName="HoverBorder" />
            </Trigger>
            <Trigger Property="InputGestureText" Value="">
                <Setter Property="Visibility" Value="Collapsed" TargetName="GestureText" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" x:Name="RowDefinition0" />
                            <RowDefinition Height="*" x:Name="RowDefinition1" />
                        </Grid.RowDefinitions>
                        <Border x:Name="HeaderBorder" Background="{DynamicResource ControlBackgroundBrush}"
                                BorderThickness="0,0,0,1" BorderBrush="{DynamicResource NormalBorderBrush}">
                            <TabPanel x:Name="HeaderPanel" IsItemsHost="True" Panel.ZIndex="1" Width="Auto" Height="Auto"
                                      KeyboardNavigation.TabIndex="1" RenderTransformOrigin="0.5,0.5">
                                <TabPanel.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="0" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </TabPanel.LayoutTransform>
                                <TabPanel.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </TabPanel.RenderTransform>
                            </TabPanel>
                        </Border>
                        <Border x:Name="ContentPanel" Grid.Column="0" Grid.Row="1"
                                KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Local" Background="{DynamicResource ControlBackgroundBrush}">
                            <ContentPresenter x:Name="PART_SelectedContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                            <Setter Property="Grid.Row" TargetName="HeaderBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="HeaderBorder" Value="0,1,0,0"/>
                            <Setter Property="CornerRadius" TargetName="ContentPanel" Value="2,2,0,0"/>
                            <Setter Property="CornerRadius" TargetName="HeaderBorder" Value="0,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Grid.Column" TargetName="HeaderBorder" Value="0"/>
                            <Setter Property="BorderThickness" TargetName="HeaderBorder" Value="0,0,1,0"/>
                            <Setter Property="Margin" TargetName="HeaderBorder" Value="0,0,0,0"/>
                            <Setter Property="Margin" TargetName="ContentPanel" Value="0,0,0,0"/>
                            <Setter Property="CornerRadius" TargetName="HeaderBorder" Value="0,2,2,0"/>
                            <Setter Property="CornerRadius" TargetName="ContentPanel" Value="0,2,2,0"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Grid.Column" TargetName="HeaderBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="HeaderBorder" Value="1,0,0,0"/>
                            <Setter Property="CornerRadius" TargetName="ContentPanel" Value="2,0,0,2"/>
                            <Setter Property="CornerRadius" TargetName="HeaderBorder" Value="0,2,2,0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="TabGrid">
                        <Border x:Name="SelectedBorder" Visibility="Collapsed" Margin="1,0,1,0"
                                SnapsToDevicePixels="True"
                                BorderThickness="0,0,0,2" BorderBrush="{DynamicResource GlyphBrush}"/>
                        <TextBlock x:Name="TextContent" Padding="5" Style="{DynamicResource BaseTextBlockStyle}"
                                   Foreground="{TemplateBinding Foreground}">
                            <ContentPresenter x:Name="ContentSite" RecognizesAccessKey="True" ContentSource="Header" 
                                              HorizontalAlignment="Center" Margin="5" VerticalAlignment="Center" />
                        </TextBlock>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="LayoutTransform" TargetName="TextContent">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="90" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="LayoutTransform" TargetName="TabGrid">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="270"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="LayoutTransform" TargetName="TabGrid">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="LayoutTransform" TargetName="TextContent">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="180" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="LayoutTransform" TargetName="TabGrid">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="180"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource TextBrushDarker}" TargetName="TextContent"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="SelectedBorder" />
                            <Setter Property="Opacity" Value="1" TargetName="TextContent"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="SelectedBorder" />
                            <Setter Property="BorderThickness" Value="1,1,1,2" TargetName="SelectedBorder" />
                            <Setter Property="Opacity" Value="1" TargetName="TextContent"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="SelectedBorder" />
                            <Setter Property="Opacity" Value="1" TargetName="TextContent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TickBar x:Name="TopTick" Visibility="Collapsed" Height="4" Placement="Top"
                                 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  Fill="{DynamicResource GlyphBrush}" />
                        <Border x:Name="Border" Grid.Row="1" Margin="0" Height="6" CornerRadius="{DynamicResource ControlCornerRadius}"
                                Background="{TemplateBinding Background}" BorderBrush="{DynamicResource NormalBorderBrush}"
                                BorderThickness="{DynamicResource ControlBorderThickness}" />
                        <Track Grid.Row="1" x:Name="PART_Track">
                            <Track.Thumb>
                                <Thumb Background="{DynamicResource GlyphBrush}" Width="25" />
                            </Track.Thumb>
                        </Track>
                        <TickBar x:Name="BottomTick" Visibility="Collapsed" Grid.Row="2" Height="4" Placement="Bottom" 
                                 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Fill="{TemplateBinding Foreground}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" Value="Visible" TargetName="TopTick" />
                            <Setter Property="Visibility" Value="Visible" TargetName="BottomTick" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TreeView}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="{DynamicResource ControlCornerRadius}">
                        <ScrollViewer Focusable="False" Padding="4"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                      CanContentScroll="True">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Padding" Value="0,2,4,2" />
        <Setter Property="Margin" Value="0,1,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel>
                        <Border x:Name="SelectionBorder" Background="Transparent"
                                Padding="{TemplateBinding Padding}" Margin="{TemplateBinding Margin}">
                            <DockPanel>
                                <ToggleButton x:Name="Expander" ClickMode="Press" DockPanel.Dock="Left"
                                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource BaseStyle}">
                                            <Setter Property="Focusable" Value="False" />
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Grid>
                                                            <Viewbox x:Name="IsExpandedPath" Visibility="Visible" >
                                                                <TextBlock Text="4" FontFamily="Marlett" Foreground="{DynamicResource TextBrush}"
                                                                           HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                            </Viewbox>
                                                            <Viewbox x:Name="ExpandPath" Visibility="Collapsed" >
                                                                <TextBlock Text="6" FontFamily="Marlett" Foreground="{DynamicResource TextBrush}"
                                                                           HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                            </Viewbox>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" TargetName="ExpandPath" />
                                                                <Setter Property="Visibility" Value="Collapsed" TargetName="IsExpandedPath" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" Height="Auto"
                                                  DockPanel.Dock="Left"/>
                            </DockPanel>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Margin="20,0,0,0" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ItemsHost" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Visibility" Value="Hidden" TargetName="Expander" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="SelectionBorder">
                            <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Border DockPanel.Dock="Top"
                            BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="{DynamicResource ControlCornerRadius}">
                        <DockPanel>
                            <Border DockPanel.Dock="Top" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource NormalBrush}" >
                                <TextBlock Style="{DynamicResource BaseTextBlockStyle}" Margin="{TemplateBinding Padding}">
                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header"
                                                      RecognizesAccessKey="True" />
                                </TextBlock>
                            </Border>
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" DockPanel.Dock="Top"
                                              Margin="{TemplateBinding Padding}"/>
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="ScrollViewer">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <DockPanel Margin="{TemplateBinding Padding}">
                            <ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden" Focusable="false">
                                <GridViewHeaderRowPresenter Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                                            AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </ScrollViewer>
                            <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                                    KeyboardNavigation.DirectionalNavigation="Local"
                                                    CanContentScroll="True"
                                                    CanHorizontallyScroll="False"
                                                    CanVerticallyScroll="False" />
                        </DockPanel>
                        <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal"
                                   Grid.Row="1" Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />

                        <ScrollBar Name="PART_VerticalScrollBar" Grid.Column="1"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Value="{TemplateBinding VerticalOffset}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{DynamicResource ControlBackgroundBrush}" CornerRadius="{DynamicResource ControlCornerRadius}">
                        <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0,1,0,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid>
                        <Rectangle x:Name="HoverRectangle" Visibility="Collapsed" Fill="{DynamicResource HoverBrush}" />
                        <Rectangle x:Name="SelectedRectangle" Visibility="Collapsed" Fill="{DynamicResource GlyphBrush}" />
                        <Border Padding="{TemplateBinding Padding}" Background="Transparent" >
                            <GridViewRowPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Selector.IsSelected" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="SelectedRectangle" />
                            <Setter Property="Foreground" Value="{DynamicResource TextBrushDark}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="HoverRectangle" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Grid Margin="1">
                        <Border Padding="5,3,5,3" Style="{DynamicResource HighlightBorder}" BorderThickness="1" Background="Transparent">
                            <TextBlock Style="{DynamicResource BaseTextBlockStyle}">
                                <ContentPresenter VerticalAlignment="Center" />
                            </TextBlock>
                        </Border>
                        <Thumb x:Name="PART_HeaderGripper" HorizontalAlignment="Right" Margin="0,0,-10,0">
                            <Thumb.Style>
                                <Style TargetType="Thumb">
                                    <Setter Property="Width" Value="20" />
                                    <Setter Property="SnapsToDevicePixels" Value="True" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                <Border Padding="{TemplateBinding Padding}" Background="Transparent">
                                                    <Rectangle HorizontalAlignment="Center" Width="1"/>
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Thumb.Style>
                        </Thumb>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Hyperlink}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
        <Setter Property="TextDecorations" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource TextBrushDarker}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource TooltipBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource PopupBorderThickness}" />
    </Style>

    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource NormalBrushDark}" />
    </Style>

    <Style TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"  BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" Height="1" SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Type Separator}}" />

    <Style x:Key="CalendarItemStyle" TargetType="{x:Type CalendarItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource PopupBackgroundBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource PopupBorderThickness}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarItem">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <DockPanel Name="PART_Root" LastChildFill="True" >
                            <Button x:Name="PART_PreviousButton" DockPanel.Dock="Left"
                                    FontWeight="Bold" FontFamily="Marlett" Padding="4,2,4,2"
                                    Content="3" Focusable="False" BorderThickness="0"
                                    Background="Transparent"/>
                            <Button x:Name="PART_NextButton" DockPanel.Dock="Right" 
                                    FontWeight="Bold" FontFamily="Marlett" Padding="4,2,4,2"
                                    Content="4" BorderThickness="0"
                                    Focusable="False" 
                                    Background="Transparent"/>
                            <Button x:Name="PART_HeaderButton" DockPanel.Dock="Top"
                                    Padding="2" Height="30" Focusable="False"
                                    BorderThickness="0" Background="Transparent"/>
                            <Grid>
                                <Grid x:Name="PART_MonthView" Visibility="Visible">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                </Grid>
                                <Grid x:Name="PART_YearView"  Visibility="Hidden">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>

                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                </Grid>
                            </Grid>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Calendar}}, Path=DisplayMode}" Value="Year">
                            <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Calendar}}, Path=DisplayMode}" Value="Decade">
                            <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CalendarButtonStyle" TargetType="{x:Type CalendarButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize}" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarButton}">
                    <Border Background="Transparent">
                        <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                                          ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                          ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        TextElement.Foreground="{TemplateBinding Foreground}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInactive" Value="True">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CalendarDayButtonStyle" TargetType="{x:Type CalendarDayButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize}" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarDayButton}">
                    <Border Background="Transparent">
                        <ContentPresenter
                        Content="{TemplateBinding ContentControl.Content}"
                        ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                        ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                        HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                        TextElement.Foreground="{TemplateBinding Foreground}">
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsToday" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
                        </Trigger>
                        <Trigger Property="IsInactive" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TextBrushDarker}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CalendarStyle" TargetType="{x:Type Calendar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="CalendarDayButtonStyle" Value="{DynamicResource CalendarDayButtonStyle}"/>
        <Setter Property="CalendarButtonStyle" Value="{DynamicResource CalendarButtonStyle}"/>
        <Setter Property="Background" Value="{DynamicResource PopupBackgroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Calendar">
                    <Grid Name="PART_Root">
                        <CalendarItem Name="PART_CalendarItem"
                                      Style="{DynamicResource CalendarItemStyle}"
                                      VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DatePicker}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="TextBlock.FontFamily" Value="{DynamicResource FontFamily}" />
        <Setter Property="TextBlock.FontSize" Value="{DynamicResource FontSize}" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="TextBlock.Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="CalendarStyle" Value="{StaticResource CalendarStyle}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DatePicker">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{DynamicResource ControlCornerRadius}"
                            Padding="{TemplateBinding Padding}">
                        <DockPanel>
                            <Popup x:Name="PART_Popup" StaysOpen="False"
                                   AllowsTransparency="True" Placement="Bottom"                                   
                                   PlacementTarget="{Binding ElementName=PART_TextBox}" />
                            <ToggleButton x:Name="PART_Button" DockPanel.Dock="Right" Content="🗓"
                                          BorderThickness="0" Padding="5,0,5,0"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <DatePickerTextBox x:Name="PART_TextBox" DockPanel.Dock="Left"
                                               Background="Transparent" BorderThickness="0"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_TextBox"  Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="Border" />
                        </Trigger>
                        <Trigger SourceName="PART_Button"  Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="Border" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="Border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DatePickerTextBox}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="CaretBrush" Value="{DynamicResource TextBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                    <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" CornerRadius="{DynamicResource ControlCornerRadius}"
                            Style="{DynamicResource HighlightBorder}">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost"
                                          VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
                                          HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region Playnite Controls and Styles -->

    <Style x:Key="DetailsHyperlink" TargetType="Hyperlink" BasedOn="{StaticResource {x:Type Hyperlink}}">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Foreground" Value="LightGray" />
        <Setter Property="TextDecorations" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BottomButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="Padding" Value="15,8,15,8" />
        <Setter Property="MinWidth" Value="70" />
    </Style>

    <Style x:Key="ImageHighlightButton" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Fill="{TemplateBinding Foreground}" OpacityMask="{TemplateBinding OpacityMask}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource TextBrushDarker}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PlayButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{DynamicResource GlyphBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrushDark}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource ControlBorderThickness}" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="DefaultBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"  Background="{TemplateBinding Background}"
                                Opacity="1" CornerRadius="{DynamicResource ControlCornerRadius}"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True" />
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="DefaultBorder" />
                            <Setter Property="Opacity" TargetName="Grid" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource TextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WindowBarButton" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Margin" Value="5,0,5,0" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <TextBlock FontFamily="Marlett" Foreground="{TemplateBinding Foreground}" FontSize="16" Padding="{TemplateBinding Padding}">
                        <ContentPresenter />
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PopupBorder" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource PopupBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource PopupBorderThickness}" />
    </Style>

    <!--#endregion-->

    <Style x:Key="StandardWindowStyle" TargetType="pc:WindowBase">
        <Setter Property="Background" Value="{DynamicResource WindowBackgourndBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
        <Setter Property="TextOptions.TextRenderingMode" Value="Auto" />
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="25" CornerRadius="0" ResizeBorderThickness="4"
                              NonClientFrameEdges ="None" UseAeroCaptionButtons="False" GlassFrameThickness="0"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pc:WindowBase}">
                    <ControlTemplate.Resources>
                        <sys:Boolean x:Key="True">True</sys:Boolean>
                    </ControlTemplate.Resources>
                    <AdornerDecorator>
                        <Border x:Name="WindowBorder" BorderBrush="{DynamicResource PopupBorderBrush}" CornerRadius="0"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}">
                            <Grid>
                                <ContentPresenter Margin="0,25,0,0"/>
                                <DockPanel DockPanel.Dock="Top" LastChildFill="False">
                                    <DockPanel DockPanel.Dock="Top" LastChildFill="False">
                                        <TextBlock Text="{TemplateBinding Title}" DockPanel.Dock="Left" Margin="10,3,0,0" VerticalAlignment="Center"
                                                   Opacity="0.75" Style="{DynamicResource BaseTextBlockStyle}" x:Name="PART_TextTitle" />
                                        <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" Margin="0,3,5,0">
                                            <Button Style="{DynamicResource WindowBarButton}" Content="0" x:Name="PART_ButtonMinimize"/>
                                            <Button Style="{DynamicResource WindowBarButton}" Content="1" x:Name="PART_ButtonMaximize" />
                                            <Button Style="{DynamicResource WindowBarButton}" Content="r" x:Name="PART_ButtonClose"/>
                                        </StackPanel>
                                    </DockPanel>
                                </DockPanel>
                            </Grid>
                        </Border>
                    </AdornerDecorator>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding IsActive, Source={x:Static pui:App.Current}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" Value="0.4" />
                        </MultiDataTrigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="Content" Value="2" TargetName="PART_ButtonMaximize"/>
                            <Setter Property="Padding" Value="8" TargetName="WindowBorder"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" TargetName="WindowBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainWindowStyle" TargetType="pc:WindowBase"
           BasedOn="{StaticResource ResourceKey=StandardWindowStyle}">
    </Style>

    <Style TargetType="{x:Type pc:GameMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource PopupBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource PopupBorderThickness}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pc:GameMenu}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Grid.IsSharedSizeScope="True">
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type pc:ExtendedListBox}" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
    </Style>

    <Style TargetType="{x:Type pc:ExtendedListView}" BasedOn="{StaticResource {x:Type ListView}}">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
    </Style>

    <Style TargetType="{x:Type pc:NumericBox}" BasedOn="{StaticResource {x:Type TextBox}}">
    </Style>

    <Style TargetType="{x:Type pc:NullableIntBox}" BasedOn="{StaticResource {x:Type TextBox}}">
    </Style>

    <ControlTemplate x:Key="GamePropertiesView">
        <Grid>
            <Grid.Resources>
                <pui:BindingProxy x:Key="Proxy" Data="{Binding}" />
                <pui:CustomImageStringToImageConverter x:Key="CustomImageStringToImageConverter" />
                <pui:EnumerableNullOrEmptyToVisibilityConverter x:Key="EnumerableNullOrEmptyToVisibilityConverter" />
                <pui:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
                <pui:NullableDateToStringConverter x:Key="NullableDateToStringConverter" />
                <pui:StringNullOrEmptyToVisibilityConverter x:Key="StringNullOrEmptyToVisibilityConverter" />
                <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

                <Style x:Key="ListTextBlock" TargetType="TextBlock" BasedOn="{StaticResource BaseTextBlockStyle}">
                    <Setter Property="Margin" Value="0,2,5,2" />
                    <Setter Property="TextWrapping" Value="Wrap" />
                </Style>
                <Style x:Key="ListItems" TargetType="ItemsControl">
                    <Setter Property="ItemTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <TextBlock Style="{StaticResource ListTextBlock}">
                                        <Hyperlink NavigateUri="{Binding Mode=OneWay}" 
                                                   Tag="{Binding Tag, RelativeSource={RelativeSource AncestorType=ItemsControl}}">
                                            <Hyperlink.Style>
                                                <Style TargetType="Hyperlink" BasedOn="{StaticResource {x:Type Hyperlink}}">
                                                    <Style.Triggers>
                                                        <Trigger Property="Tag" Value="Genres">
                                                            <Setter Property="Command" Value="{Binding Data.SetGenresFilterCommand, Source={StaticResource Proxy}}" />
                                                            <Setter Property="CommandParameter" Value="{Binding}" />
                                                        </Trigger>
                                                        <Trigger Property="Tag" Value="Developers">
                                                            <Setter Property="Command" Value="{Binding Data.SetDevelopersFilterCommand, Source={StaticResource Proxy}}" />
                                                            <Setter Property="CommandParameter" Value="{Binding}" />
                                                        </Trigger>
                                                        <Trigger Property="Tag" Value="Publishers">
                                                            <Setter Property="Command" Value="{Binding Data.SetPublishersFilterCommand, Source={StaticResource Proxy}}" />
                                                            <Setter Property="CommandParameter" Value="{Binding}" />
                                                        </Trigger>
                                                        <Trigger Property="Tag" Value="Categories">
                                                            <Setter Property="Command" Value="{Binding Data.SetCategoriesFilterCommand, Source={StaticResource Proxy}}" />
                                                            <Setter Property="CommandParameter" Value="{Binding}" />
                                                        </Trigger>
                                                        <Trigger Property="Tag" Value="Tags">
                                                            <Setter Property="Command" Value="{Binding Data.SetTagsFilterCommand, Source={StaticResource Proxy}}" />
                                                            <Setter Property="CommandParameter" Value="{Binding}" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Hyperlink.Style>
                                            <Run Text="{Binding Mode=OneWay}" />
                                        </Hyperlink>
                                </TextBlock>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <WrapPanel FlowDirection="LeftToRight" IsItemsHost="true" />
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <Style x:Key="PropertyListLabel" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
                    <Setter Property="Margin" Value="0,10,0,2" />
                </Style>
            </Grid.Resources>

            <StackPanel>
                <!-- Genres -->
                <Label Content="{DynamicResource LOCGenreLabel}" Visibility="{Binding Game.Genres, Converter={StaticResource EnumerableNullOrEmptyToVisibilityConverter}}" />
                <ItemsControl ItemsSource="{Binding Game.Genres, Mode=OneWay}" Style="{StaticResource ListItems}"
                                  Visibility="{Binding Game.Genres, Converter={StaticResource EnumerableNullOrEmptyToVisibilityConverter}}"
                                  Tag="Genres"/>

                <!-- Developers -->
                <Label Content="{DynamicResource LOCDeveloperLabel}" Style="{StaticResource PropertyListLabel}" Visibility="{Binding Game.Developers, Converter={StaticResource EnumerableNullOrEmptyToVisibilityConverter}}"/>
                <ItemsControl ItemsSource="{Binding Game.Developers, Mode=OneWay}" Style="{StaticResource ListItems}"
                                  Visibility="{Binding Game.Developers, Converter={StaticResource EnumerableNullOrEmptyToVisibilityConverter}}"
                                  Tag="Developers"/>

                <!-- Publishers -->
                <Label Content="{DynamicResource LOCPublisherLabel}" Style="{StaticResource PropertyListLabel}" Visibility="{Binding Game.Publishers, Converter={StaticResource EnumerableNullOrEmptyToVisibilityConverter}}"/>
                <ItemsControl ItemsSource="{Binding Game.Publishers, Mode=OneWay}" Style="{StaticResource ListItems}"
                                  Visibility="{Binding Game.Publishers, Converter={StaticResource EnumerableNullOrEmptyToVisibilityConverter}}"
                                  Tag="Publishers"/>

                <!-- Release Date -->
                <Label Content="{DynamicResource LOCGameReleaseDateTitle}" Style="{StaticResource PropertyListLabel}" Visibility="{Binding Game.ReleaseDate, Converter={StaticResource NullToVisibilityConverter}}"/>
                <TextBlock Visibility="{Binding Game.ReleaseDate, Converter={StaticResource NullToVisibilityConverter}}"
                               Style="{StaticResource ListTextBlock}">
                            <Hyperlink NavigateUri="{Binding Game.ReleaseDate, Converter={StaticResource NullableDateToStringConverter}}"
                                       Command="{Binding SetReleaseDateFilterCommand}"
                                       CommandParameter="{Binding NavigateUri, RelativeSource={RelativeSource Self}}">
                                <Run Text="{Binding Game.ReleaseDate, Mode=OneWay, Converter={StaticResource NullableDateToStringConverter}}" />
                            </Hyperlink>
                </TextBlock>

                <!-- Categories -->
                <Label Content="{DynamicResource LOCGameCategoriesTitle}" Style="{StaticResource PropertyListLabel}" Visibility="{Binding Game.Categories, Converter={StaticResource EnumerableNullOrEmptyToVisibilityConverter}}"/>
                <ItemsControl ItemsSource="{Binding Game.Categories, Mode=OneWay}" Style="{StaticResource ListItems}"
                                  Visibility="{Binding Game.Categories, Converter={StaticResource EnumerableNullOrEmptyToVisibilityConverter}}"
                                  Tag="Categories"/>

                <!-- Tags -->
                <Label Content="{DynamicResource LOCTagsLabel}" Style="{StaticResource PropertyListLabel}" Visibility="{Binding Game.Tags, Converter={StaticResource EnumerableNullOrEmptyToVisibilityConverter}}"/>
                <ItemsControl ItemsSource="{Binding Game.Tags, Mode=OneWay}" Style="{StaticResource ListItems}"
                                  Visibility="{Binding Game.Tags, Converter={StaticResource EnumerableNullOrEmptyToVisibilityConverter}}"
                                  Tag="Tags"/>

                <!-- Platform -->
                <Label Content="{DynamicResource LOCPlatformTitle}" Style="{StaticResource PropertyListLabel}" Visibility="{Binding Game.Platform.Name, Converter={StaticResource StringNullOrEmptyToVisibilityConverter}}" />
                <TextBlock Visibility="{Binding Game.Platform.Name, Converter={StaticResource StringNullOrEmptyToVisibilityConverter}}"
                                   Style="{StaticResource ListTextBlock}">
                            <Hyperlink NavigateUri="{Binding Game.Platform.Name}"
                                       Command="{Binding SetPlatformFilterCommand}"
                                       CommandParameter="{Binding NavigateUri, RelativeSource={RelativeSource Self}}">
                                <Run Text="{Binding Game.Platform.Name, Mode=OneWay}" />
                            </Hyperlink>
                </TextBlock>

                <!-- Links -->
                <Label Content="{DynamicResource LOCLinksLabel}" Style="{StaticResource PropertyListLabel}"
                           Visibility="{Binding Game.Links, Converter={StaticResource EnumerableNullOrEmptyToVisibilityConverter}}"/>
                <ItemsControl ItemsSource="{Binding Game.Links}"
                                  Visibility="{Binding Game.Links, Converter={StaticResource EnumerableNullOrEmptyToVisibilityConverter}}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Style="{StaticResource ListTextBlock}">
                                        <Hyperlink NavigateUri="{Binding Url}" ToolTip="{Binding Url}"
                                                   Command="{x:Static pcmd:GeneralCommands.NavigateUrlCommand}"
                                                   CommandParameter="{Binding NavigateUri, RelativeSource={RelativeSource Self}}">
                                            <Run Text="{Binding Name, Mode=OneWay}" />
                                        </Hyperlink>
                            </TextBlock>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </StackPanel>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="PlayTimeInfoView">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <TextBlock Text="{DynamicResource LOCTimePlayed}" Foreground="{DynamicResource GlyphBrush}"
                       Grid.Column="0" Grid.Row="0" Margin="0,0,10,3"/>
            <TextBlock Text="{Binding Game.Playtime, Converter={pui:LongToTimePlayedConverter}}"
                       Grid.Column="1" Grid.Row="0" Margin="10,0,0,0" />
            <TextBlock Text="{DynamicResource LOCLastPlayed}" Foreground="{DynamicResource GlyphBrush}" 
                       Grid.Column="0" Grid.Row="1"/>
            <TextBlock Text="{Binding Game.LastActivity, Converter={pui:DateTimeToLastPlayedConverter}}"
                       Grid.Column="1" Grid.Row="1" Margin="10,0,0,0" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="GameDetailsView">
        <Grid>
            <Grid.Resources>
                <pui:BindingProxy x:Key="Proxy" Data="{Binding}" />
                <pui:CustomImageStringToImageConverter x:Key="CustomImageStringToImageConverter" />
                <pui:EnumerableNullOrEmptyToVisibilityConverter x:Key="EnumerableNullOrEmptyToVisibilityConverter" />
                <pui:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
                <pui:NullableDateToStringConverter x:Key="NullableDateToStringConverter" />
                <pui:StringNullOrEmptyToVisibilityConverter x:Key="StringNullOrEmptyToVisibilityConverter" />
                <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="260"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.Style>
                <Style TargetType="Grid">
                    <Style.Triggers>
                        <Trigger Property="DataContext" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>

            <pc:FadeImage HorizontalAlignment="Center" VerticalAlignment="Top"
                          Grid.ColumnSpan="2" Grid.RowSpan="4"
                          Source="{Binding Game.BackgroundImageObject, IsAsync=True, Mode=OneWay}" />

            <DockPanel Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0"
                       Margin="20,20,0,0">
                <Image DockPanel.Dock="Left" MaxHeight="32" MaxWidth="32" RenderOptions.BitmapScalingMode="Fant"
                       Source="{Binding Game.IconObject, Mode=OneWay}" />
                <TextBlock Text="{Binding Game.DisplayName, Mode=OneWay}" FontSize="20" Margin="10,10,0,10" TextWrapping="Wrap"
                           DockPanel.Dock="Left" VerticalAlignment="Center" Foreground="{StaticResource TextBrush}">
                    <TextBlock.Effect>
                        <DropShadowEffect ShadowDepth="3"/>
                    </TextBlock.Effect>
                </TextBlock>
            </DockPanel>

            <StackPanel Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1"
                        Margin="20,20,20,30" Orientation="Horizontal" Height="35">
                <Button MinWidth="120" Content="{DynamicResource LOCPlayGame}" Style="{StaticResource PlayButton}"
                        Visibility="{Binding IsPlayAvailable, Converter={StaticResource BooleanToVisibilityConverter}}"
                        Command="{Binding PlayCommand}"/>
                <Button MinWidth="120" Content="{DynamicResource LOCInstallGame}"
                        Visibility="{Binding IsInstallAvailable, Converter={StaticResource BooleanToVisibilityConverter}}"
                        Command="{Binding InstallCommand}"/>
                <Button MinWidth="120" Content="{DynamicResource LOCSetupRunning}"
                        Visibility="{Binding IsInstalling, Converter={StaticResource BooleanToVisibilityConverter}}"
                        Command="{Binding CheckSetupCommand}"/>
                <Button MinWidth="120" Content="{DynamicResource LOCUninstalling}"  
                        Visibility="{Binding IsUninstalling, Converter={StaticResource BooleanToVisibilityConverter}}"
                        Command="{Binding CheckSetupCommand}"/>
                <Button MinWidth="120" Content="{DynamicResource LOCGameRunning}" 
                        Visibility="{Binding IsRunning, Converter={StaticResource BooleanToVisibilityConverter}}"
                        Command="{Binding CheckExecutionCommand}"/>
                <Button MinWidth="120" Content="{DynamicResource LOCGameLaunching}"
                        Visibility="{Binding IsLaunching, Converter={StaticResource BooleanToVisibilityConverter}}"
                        Command="{Binding CheckExecutionCommand}"/>
                <Button MinWidth="120" Content="{DynamicResource LOCMoreAction}"
                        Margin="15,0,0,0" pui:LeftClickContextMenuBehavior.Enabled="True">
                    <Button.ContextMenu>
                        <pc:GameMenu Placement="Bottom" DataContext="{Binding Data.Game, Source={StaticResource Proxy}}"
                                     ShowStartSection="False" />
                    </Button.ContextMenu>
                </Button>
            </StackPanel>

            <Border Grid.Column="0" Grid.Row="2" Padding="10" Margin="20,0,0,10"
                    CornerRadius="{DynamicResource ControlCornerRadius}"
                    Background="#BC000000">
                <Border.Style>
                    <Style TargetType="Border">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Game.Playtime}" Value="0">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <ContentControl Template="{StaticResource PlayTimeInfoView}" />
            </Border>

            <Border Grid.Column="0" Grid.Row="3" Padding="10" Margin="20,0,0,10"
                    CornerRadius="{DynamicResource ControlCornerRadius}"
                    Background="#BC000000" VerticalAlignment="Top"
                    Visibility="{Binding ShowInfoPanel, Converter={StaticResource BooleanToVisibilityConverter}}">
                <ScrollViewer>
                    <ContentControl Template="{StaticResource GamePropertiesView}" />
                </ScrollViewer>
            </Border>

            <Border Grid.Column="1" Grid.Row="2" Grid.RowSpan="2" 
                    Padding="5" Margin="10,0,20,10"
                    CornerRadius="{DynamicResource ControlCornerRadius}"
                    Background="#BC000000" VerticalAlignment="Top">
                <Border.Style>
                    <Style TargetType="Border" BasedOn="{StaticResource {x:Type Border}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Game.Description}" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Game.Description}" Value="">
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <ScrollViewer>
                    <pc:HtmlTextView Background="Transparent" HtmlText="{Binding Game.Description, Mode=OneWay}"
                                     HtmlForeground="{DynamicResource TextColor}"
                                     LinkForeground="{DynamicResource GlyphColor}"
                                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                     ScrollViewer.VerticalScrollBarVisibility="Disabled"/>
                </ScrollViewer>
            </Border>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="MainView" TargetType="{x:Type pc:MainView}">
        <Grid d:DesignWidth="900" d:DesignHeight="500">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Grid.Resources>
                <pui:BindingProxy x:Key="Proxy" Data="{Binding}" />
                <sys:Boolean x:Key="True">True</sys:Boolean>
                <sys:Boolean x:Key="False">False</sys:Boolean>
                <pui:OpacityBoolConverter x:Key="OpacityBoolConverter" />
                <pui:EnumConverter x:Key="EnumConverter" />
                <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                <pui:BidirectionalEnumAndNumberConverter x:Key="BidirectionalEnumAndNumberConverter" />
                <pui:CustomImageStringToImageConverter x:Key="CustomImageStringToImageConverter" />
                <pui:WidthToFontSizeConverter x:Key="WidthToFontSizeConverter" />
                <pui:ListToStringConverter x:Key="ListToStringConverter" />
                <pui:NotificationIconConverter x:Key="NotificationIconConverter" />
                <pui:NullToDependencyPropertyUnsetConverter x:Key="NullToDependencyPropertyUnsetConverter" />
            </Grid.Resources>

            <DockPanel LastChildFill="True" Grid.Row="0" Grid.Column="0">
                <DockPanel Cursor="Hand" Margin="10,0,5,0" WindowChrome.IsHitTestVisibleInChrome="True"
                       Opacity="{Binding IsMouseOver, Converter={StaticResource OpacityBoolConverter}, ConverterParameter={StaticResource True}, RelativeSource={RelativeSource Self}}"
                       pui:LeftClickContextMenuBehavior.Enabled="True">
                    <Border DockPanel.Dock="Left" Background="Transparent">
                        <StackPanel Orientation="Horizontal">
                            <Image Source="/Images/applogo.png" Height="40" Name="ImageLogo" RenderOptions.BitmapScalingMode="Fant" Margin="5"/>
                            <TextBlock FontFamily="Marlett" Text="6" VerticalAlignment="Center" FontWeight="Bold" FontSize="16" Foreground="{StaticResource GlyphBrush}" />
                        </StackPanel>
                    </Border>
                    <DockPanel.ContextMenu>
                        <ContextMenu StaysOpen="False" Name="MenuMainMenu" Placement="Bottom">
                            <ContextMenu.Resources>
                                <Style x:Key="ProgressMenu" TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
                                    <Style.Triggers>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="ToolTip" Value="{DynamicResource LOCProgreessAvailabilityMessage}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ContextMenu.Resources>
                            <MenuItem Header="{DynamicResource LOCMenuAddGame}">
                                <MenuItem Header="{DynamicResource LOCMenuAddGameManual}"
                                          Command="{Binding AddCustomGameCommand}"
                                          InputGestureText="{Binding AddCustomGameCommand.GestureText}"/>
                                <MenuItem Header="{DynamicResource LOCMenuAddGameInstalled}"
                                          Command="{Binding AddInstalledGamesCommand}"/>
                                <MenuItem Header="{DynamicResource LOCMenuAddGameEmulated}"
                                          Command="{Binding AddEmulatedGamesCommand}"
                                          InputGestureText="{Binding AddEmulatedGamesCommand.GestureText}"/>
                                <MenuItem.Icon>
                                    <Image Source="/Images/MenuIcons/add.png" Height="16"
                                           RenderOptions.BitmapScalingMode="NearestNeighbor" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <Separator />
                            <MenuItem Header="{DynamicResource LOCMenuReloadLibrary}" Style="{DynamicResource ProgressMenu}"
                                      Command="{Binding UpdateGamesCommand}"
                                      InputGestureText="{Binding UpdateGamesCommand.GestureText}">
                                <MenuItem.Icon>
                                    <Image Source="/Images/MenuIcons/refresh.png"
                                           RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="{DynamicResource LOCMenuTools}">
                                <MenuItem Header="{DynamicResource LOCMenuPlatformEmulatorSettingsTitle}"
                                          Command="{Binding OpenPlatformsCommand}"
                                          InputGestureText="{Binding OpenPlatformsCommand.GestureText}"/>
                                <MenuItem Header="{DynamicResource LOCMenuDownloadMetadata}" Style="{DynamicResource ProgressMenu}"
                                          Command="{Binding DownloadMetadataCommand}"
                                          InputGestureText="{Binding DownloadMetadataCommand.GestureText}" />
                                <Separator />
                                <MenuItem Header="{DynamicResource LOCInstallScript}"
                                          Command="{Binding InstallScriptCommand}"
                                          InputGestureText="{Binding InstallScriptCommand.GestureText}"/>
                                <MenuItem Header="{DynamicResource LOCReloadScripts}"
                                          Command="{Binding ReloadScriptsCommand}"
                                          InputGestureText="{Binding ReloadScriptsCommand.GestureText}"/>
                                <Separator />
                                <MenuItem Header="{DynamicResource LOCMenuPlayniteSettingsTitle}"
                                          Command="{Binding OpenSettingsCommand}"
                                          InputGestureText="{Binding OpenSettingsCommand.GestureText}">
                                    <MenuItem.Icon>
                                        <Image Source="/Images/MenuIcons/settings.png" />
                                    </MenuItem.Icon>
                                </MenuItem>
                            </MenuItem>
                            <MenuItem Header="{DynamicResource LOCExtensions}"
                                      IsEnabled="{Binding HasExportedFunctions}"
                                      DataContext="{Binding Api, Source={x:Static pui:App.Current}}"
                                      ItemsSource="{Binding ExportedFunctions}">
                                <MenuItem.Icon>
                                    <Image Source="/Images/MenuIcons/script.png" Height="16"
                                               RenderOptions.BitmapScalingMode="NearestNeighbor" />
                                </MenuItem.Icon>
                                <MenuItem.ItemContainerStyle>
                                    <Style TargetType="MenuItem">
                                        <Setter Property="Header" Value="{Binding Name}" />
                                        <Setter Property="Command" Value="{Binding Source={StaticResource Proxy}, Path=Data.InvokeExtensionFunctionCommand}" />
                                        <Setter Property="CommandParameter" Value="{Binding}" />
                                    </Style>
                                </MenuItem.ItemContainerStyle>
                            </MenuItem>
                            <Separator />
                            <MenuItem Header="{DynamicResource LOCMenuOpenClient}" ItemsSource="{Binding ThirdPartyTools}">
                                <MenuItem.ItemContainerStyle>
                                    <Style TargetType="MenuItem">
                                        <Setter Property="Header" Value="{Binding Name}" />
                                        <Setter Property="Command" Value="{Binding Source={StaticResource Proxy}, Path=Data.ThridPartyToolOpenCommand}" />
                                        <Setter Property="CommandParameter" Value="{Binding}" />
                                    </Style>
                                </MenuItem.ItemContainerStyle>
                            </MenuItem>
                            <Separator />
                            <MenuItem Header="{DynamicResource LOCMenuOpenFullscreen}"
                                      Command="{Binding OpenFullScreenCommand}"
                                      InputGestureText="{Binding OpenFullScreenCommand.GestureText}">
                                <MenuItem.Icon>
                                    <Image Source="/Images/applogo.png" Height="16"
                                           RenderOptions.BitmapScalingMode="Fant" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <Separator />
                            <MenuItem Header="{DynamicResource LOCMenuAbout}">
                                <MenuItem.Icon>
                                    <Image Source="/Images/MenuIcons/info.png" Height="16"
                                               RenderOptions.BitmapScalingMode="NearestNeighbor" />
                                </MenuItem.Icon>
                                <MenuItem Header="{DynamicResource LOCMenuAbout}"
                                          Command="{Binding OpenAboutCommand}"
                                          InputGestureText="{Binding OpenAboutCommand.GestureText}">
                                    <MenuItem.Icon>
                                        <Image Source="/Images/icon_dark.png" Height="16"
                                               RenderOptions.BitmapScalingMode="Fant" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="{DynamicResource LOCSDKDocumentation}"
                                          Command="{x:Static pcmd:GeneralCommands.NavigateUrlCommand}"
                                          CommandParameter="https://playnite.link/docs/">
                                    <MenuItem.Icon>
                                        <Image Source="/Images/MenuIcons/script.png" Height="16"
                                               RenderOptions.BitmapScalingMode="NearestNeighbor" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <Separator />
                                <MenuItem Header="Discord"
                                          Command="{x:Static pcmd:GeneralCommands.NavigateUrlCommand}"
                                          CommandParameter="https://discord.gg/hSFvmN6">
                                    <MenuItem.Icon>
                                        <Image Source="/Images/discord.png" Height="16"
                                           RenderOptions.BitmapScalingMode="Fant" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Twitter" 
                                          Command="{x:Static pcmd:GeneralCommands.NavigateUrlCommand}"
                                          CommandParameter="https://twitter.com/AppPlaynite">
                                    <MenuItem.Icon>
                                        <Image Source="/Images/twitter.png" Height="16"
                                               RenderOptions.BitmapScalingMode="Fant" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Reddit" 
                                          Command="{x:Static pcmd:GeneralCommands.NavigateUrlCommand}"
                                          CommandParameter="https://www.reddit.com/r/playnite/">
                                    <MenuItem.Icon>
                                        <Image Source="/Images/reddit.png" Height="16"
                                           RenderOptions.BitmapScalingMode="Fant" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Patreon" 
                                          Command="{x:Static pcmd:GeneralCommands.NavigateUrlCommand}"
                                          CommandParameter="https://www.patreon.com/playnite">
                                    <MenuItem.Icon>
                                        <Image Source="/Images/patreon.png" Height="16"
                                           RenderOptions.BitmapScalingMode="Fant" />
                                    </MenuItem.Icon>
                                </MenuItem>
                            </MenuItem>
                            <MenuItem Header="{DynamicResource LOCMenuIssues}" Command="{Binding ReportIssueCommand}">
                                <MenuItem.Icon>
                                    <Image Source="/Images/MenuIcons/feedback.png"
                                           RenderOptions.BitmapScalingMode="NearestNeighbor" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="{DynamicResource LOCCheckForUpdates}"
                                      Command="{Binding CheckForUpdateCommand}" />
                            <Separator />
                            <MenuItem Header="{DynamicResource LOCExitAppLabel}"
                                      Command="{Binding ShutdownCommand}"
                                      InputGestureText="{Binding ShutdownCommand.GestureText}">
                                <MenuItem.Icon>
                                    <Image Source="/Images/MenuIcons/exit.png"
                                           RenderOptions.BitmapScalingMode="NearestNeighbor" />
                                </MenuItem.Icon>
                            </MenuItem>
                        </ContextMenu>
                    </DockPanel.ContextMenu>
                </DockPanel>

                <pc:SearchBox x:Name="SearchBoxFilter" Margin="5,8,10,8" DockPanel.Dock="Left" Padding="0" Width="235"
                              Text="{Binding AppSettings.FilterSettings.Name, Delay=500, Mode=TwoWay}"
                              IsFocused="{Binding SearchOpened, Mode=TwoWay}"
                              WindowChrome.IsHitTestVisibleInChrome="True" />

                <Border CornerRadius="{StaticResource ControlCornerRadius}" Background="Transparent" Style="{StaticResource HighlightBorder}"
                    pui:LeftClickContextMenuBehavior.Enabled="True"
                    SnapsToDevicePixels="True" BorderThickness="{StaticResource ControlBorderThickness}"
                    Width="35" Height="28" Cursor="Hand"
                    WindowChrome.IsHitTestVisibleInChrome="True">
                    <TextBlock Name="TextGroup" Text=". . ." HorizontalAlignment="Center" FontWeight="Bold"
                           Foreground="{StaticResource TextBrush}"/>
                    <Border.ContextMenu>
                        <ContextMenu StaysOpen="False" Name="MenuViewSettings" Placement="Bottom"
                                 DataContext="{Binding Source={StaticResource Proxy}, Path=Data.AppSettings}">
                            <MenuItem Header="{DynamicResource LOCMenuSortByTitle}">
                                <MenuItem Header="{DynamicResource LOCMenuSortAscending}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrderDirection, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrderDirection.Ascending}}"/>
                                <MenuItem Header="{DynamicResource LOCMenuSortDescending}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrderDirection, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrderDirection.Descending}}"/>
                                <Separator />
                                <MenuItem Header="{DynamicResource LOCGameNameTitle}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Name}}"/>
                                <MenuItem Header="{DynamicResource LOCGamePlatformTitle}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Platform}}"/>
                                <MenuItem Header="{DynamicResource LOCGameProviderTitle}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Provider}}"/>
                                <MenuItem Header="{DynamicResource LOCGameDevelopersTitle}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Developers}}"/>
                                <MenuItem Header="{DynamicResource LOCGamePublishersTitle}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Publishers}}"/>
                                <MenuItem Header="{DynamicResource LOCGameReleaseDateTitle}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.ReleaseDate}}"/>
                                <MenuItem Header="{DynamicResource LOCGameGenresTitle}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Genres}}"/>
                                <MenuItem Header="{DynamicResource LOCGameCategoriesTitle}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Categories}}"/>
                                <MenuItem Header="{DynamicResource LOCGameTagsTitle}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Tags}}"/>
                                <MenuItem Header="{DynamicResource LOCGameIsInstalledTitle}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.IsInstalled}}"/>
                                <MenuItem Header="{DynamicResource LOCGameInstallDirTitle}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.InstallDirectory}}"/>
                                <MenuItem Header="{DynamicResource LOCGameLastActivityTitle}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.LastActivity}}"/>
                                <MenuItem Header="{DynamicResource LOCTimePlayed}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Playtime}}"/>
                                <MenuItem Header="{DynamicResource LOCPlayCountLabel}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.PlayCount}}"/>
                                <MenuItem Header="{DynamicResource LOCCompletionStatus}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.CompletionStatus}}"/>
                                <MenuItem Header="{DynamicResource LOCSeriesLabel}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Series}}"/>
                                <MenuItem Header="{DynamicResource LOCVersionLabel}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Version}}"/>
                                <MenuItem Header="{DynamicResource LOCAgeRatingLabel}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.AgeRating}}"/>
                                <MenuItem Header="{DynamicResource LOCRegionLabel}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Region}}"/>
                                <MenuItem Header="{DynamicResource LOCSourceLabel}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Source}}"/>
                                <MenuItem Header="{DynamicResource LOCAddedLabel}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Added}}"/>
                                <MenuItem Header="{DynamicResource LOCModifiedLabel}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.Modified}}"/>
                                <MenuItem Header="{DynamicResource LOCUserScore}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.UserScore}}"/>
                                <MenuItem Header="{DynamicResource LOCCriticScore}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.CriticScore}}"/>
                                <MenuItem Header="{DynamicResource LOCCommunityScore}" IsCheckable="True"
                                      IsChecked="{Binding Path=ViewSettings.SortingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:SortOrder.CommunityScore}}"/>
                            </MenuItem>
                            <Separator />
                            <MenuItem Header="{DynamicResource LOCMenuGroupDont}" IsCheckable="True"
                                  IsChecked="{Binding Path=ViewSettings.GroupingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:GroupOrder.None}}"/>
                            <MenuItem Header="{DynamicResource LOCMenuGroupProvider}" IsCheckable="True"
                                  IsChecked="{Binding Path=ViewSettings.GroupingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:GroupOrder.Provider}}"/>
                            <MenuItem Header="{DynamicResource LOCMenuGroupCategory}" IsCheckable="True"
                                  IsChecked="{Binding Path=ViewSettings.GroupingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:GroupOrder.Category}}"/>
                            <MenuItem Header="{DynamicResource LOCMenuGroupPlatform}" IsCheckable="True"
                                  IsChecked="{Binding Path=ViewSettings.GroupingOrder, Converter={StaticResource EnumConverter}, ConverterParameter={x:Static shared:GroupOrder.Platform}}"/>
                        </ContextMenu>
                    </Border.ContextMenu>
                </Border>

                <CheckBox Name="CheckFilterView" DockPanel.Dock="Left" Margin="10,0,10,0" Height="28" WindowChrome.IsHitTestVisibleInChrome="True"
                      IsChecked="{Binding AppSettings.FilterPanelVisible}">
                    <CheckBox.Style>
                        <Style TargetType="CheckBox">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Border Background="Transparent" Style="{StaticResource HighlightBorder}" SnapsToDevicePixels="True"
                                            CornerRadius="{StaticResource ControlCornerRadius}" BorderThickness="{StaticResource ControlBorderThickness}" Cursor="Hand" WindowChrome.IsHitTestVisibleInChrome="True">
                                            <TextBlock Text="∇" VerticalAlignment="Center" FontWeight="Bold" FontSize="18" Margin="8,0,8,0" Foreground="{TemplateBinding Foreground}"/>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding AppSettings.FilterSettings.Active}" Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource GlyphBrush}" />
                                    <Setter Property="ToolTip" Value="{DynamicResource LOCFilterActiveLabel}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding AppSettings.FilterSettings.Active}" Value="False">
                                    <Setter Property="Foreground" Value="{StaticResource TextBrush}" />
                                    <Setter Property="ToolTip" Value="{DynamicResource LOCFilterInactiveLabel}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </CheckBox.Style>
                </CheckBox>

                <ToggleButton FontWeight="Bold" DockPanel.Dock="Right" Height="30"
                        Name="ButtonMessages" Margin="0,0,130,0" Padding="0"
                        WindowChrome.IsHitTestVisibleInChrome="True" BorderThickness="0"
                        Background="Transparent">
                    <ToggleButton.Style>
                        <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Messages.Count}" Value="0">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Setter Property="IsChecked" Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ToggleButton.Style>
                    <ToggleButton.Content>
                        <Grid>
                            <TextBlock Text="🔔" FontSize="20" />
                            <Border CornerRadius="3" Width="15" Height="15" Margin="15,15,0,0"
                                    Background="OrangeRed">
                                <TextBlock Text="{Binding Messages.Count}" FontSize="12"
                                           Foreground="{DynamicResource TextBrush}"
                                           HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </Grid>
                    </ToggleButton.Content>
                </ToggleButton>

                <Popup PlacementTarget="{Binding ElementName=ButtonMessages}"
                       IsOpen="{Binding IsChecked, ElementName=ButtonMessages}"
                       Placement="Bottom" StaysOpen="False">
                    <Border Style="{StaticResource PopupBorder}">
                        <StackPanel>
                            <ItemsControl Name="ListNotifications" BorderThickness="0" Margin="0,5,0,0" 
                                          ItemsSource="{Binding Messages}" MaxWidth="350">
                                <ItemsControl.Resources>
                                </ItemsControl.Resources>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <DockPanel Margin="6,3,6,3">
                                            <Image Source="{Binding Type, Converter={StaticResource NotificationIconConverter}}"
                                                   Height="14" DockPanel.Dock="Left" Stretch="Uniform" RenderOptions.BitmapScalingMode="HighQuality" />
                                            <TextBlock Text="{Binding Text}" VerticalAlignment="Center" DockPanel.Dock="Left" Margin="5,0,0,0" TextWrapping="Wrap"
                                                       Style="{StaticResource BaseTextBlockStyle}" />
                                        </DockPanel>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                            <Button Content="{DynamicResource LOCClearAll}" FontSize="10" Margin="5"
                                    HorizontalAlignment="Right"
                                    Command="{Binding ClearMessagesCommand}"/>
                        </StackPanel>
                    </Border>
                </Popup>

                <Grid DockPanel.Dock="Left">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="50" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="100" />
                    </Grid.ColumnDefinitions>

                    <Grid Visibility="{Binding ProgressVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
                          Grid.Column="1">
                        <ProgressBar Height="27" Maximum="{Binding ProgressTotal}"
                             Value="{Binding ProgressValue}" />
                        <TextBlock Margin="10,0,0,0" Foreground="{StaticResource TextBrush}"
                                   VerticalAlignment="Center" HorizontalAlignment="Center"
                                   Text="{Binding ProgressStatus}" />
                    </Grid>
                    <Button Visibility="{Binding ProgressVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
                            Command="{Binding CancelProgressCommand}"
                            Content="{DynamicResource LOCCancelLabel}"
                            Height="27" Grid.Column="2" Margin="10,0,20,0"
                            WindowChrome.IsHitTestVisibleInChrome="True"/>
                </Grid>
            </DockPanel>

            <Border BorderThickness="0,1,0,0" BorderBrush="{DynamicResource NormalBorderBrush}" Grid.Row="1" Grid.Column="0">
                <DockPanel>
                    <Border BorderThickness="1,0,0,1" BorderBrush="{DynamicResource NormalBorderBrush}" DockPanel.Dock="Right" Margin="0,0,0,36"                    
                            Visibility="{Binding IsChecked, ElementName=CheckFilterView, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <DockPanel>
                            <DockPanel Margin="10,5,5,5" DockPanel.Dock="Top">
                                <TextBlock DockPanel.Dock="Right" Margin="0,0,5,0">
                                <Hyperlink Command="{Binding Data.CloseFilterPanelCommand, Source={StaticResource Proxy}}">
                                    <Run Text="r" FontFamily="Marlett" />
                                </Hyperlink>
                                </TextBlock>
                                <TextBlock DockPanel.Dock="Left">
                                <Hyperlink Command="{Binding Data.ClearFiltersCommand, Source={StaticResource Proxy}}">
                                    <Run Text="{DynamicResource LOCClearFilters}" />
                                </Hyperlink>
                                </TextBlock>
                            </DockPanel>

                            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" DockPanel.Dock="Top">
                                <StackPanel Margin="0,5,0,0" MinWidth="180">
                                    <StackPanel.Resources>
                                        <Style x:Key="FilterCheck" TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
                                            <Setter Property="Margin" Value="8" />
                                            <Style.Triggers>
                                                <Trigger Property="IsChecked" Value="False">
                                                    <Setter Property="Opacity" Value="0.6" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                        <Style x:Key="FilterLabel" TargetType="Label" BasedOn="{StaticResource {x:Type Label}}">
                                            <Setter Property="Margin" Value="8,8,8,4" />
                                        </Style>
                                        <Style x:Key="FilterTextBox" TargetType="pc:SearchBox">
                                            <Setter Property="Margin" Value="8,0,8,8" />
                                            <Setter Property="ShowImage" Value="False" />
                                        </Style>
                                    </StackPanel.Resources>

                                    <CheckBox Name="CheckFilterInstalled" IsChecked="{Binding AppSettings.FilterSettings.IsInstalled}" Style="{StaticResource FilterCheck}">
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="{DynamicResource LOCGameIsInstalledTitle}" Margin="0,0,5,0" />
                                            <TextBlock Text="{Binding GamesStats.Installed, Mode=OneWay, StringFormat=({0})}" />
                                        </StackPanel>
                                    </CheckBox>

                                    <CheckBox Name="CheckFilterUnInstalled" IsChecked="{Binding AppSettings.FilterSettings.IsUnInstalled}" Style="{StaticResource FilterCheck}">
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="{DynamicResource LOCGameIsUnInstalledTitle}" Margin="0,0,5,0" />
                                            <TextBlock Text="{Binding GamesStats.UnInstalled, Mode=OneWay, StringFormat=({0})}" />
                                        </StackPanel>
                                    </CheckBox>

                                    <CheckBox Name="CheckFilterHidden" IsChecked="{Binding AppSettings.FilterSettings.Hidden}" Style="{StaticResource FilterCheck}">
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="{DynamicResource LOCGameHiddenTitle}" Margin="0,0,5,0" />
                                            <TextBlock Text="{Binding GamesStats.Hidden, Mode=OneWay, StringFormat=({0})}" />
                                        </StackPanel>
                                    </CheckBox>

                                    <CheckBox Name="CheckFilterFavorite" IsChecked="{Binding AppSettings.FilterSettings.Favorite}" Style="{StaticResource FilterCheck}">
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="{DynamicResource LOCGameFavoriteTitle}" Margin="0,0,5,0" />
                                            <TextBlock Text="{Binding GamesStats.Favorite, Mode=OneWay, StringFormat=({0})}" />
                                        </StackPanel>
                                    </CheckBox>

                                    <Border Height="10" />

                                    <CheckBox Name="CheckFilterSteam" IsChecked="{Binding AppSettings.FilterSettings.Steam}" Style="{StaticResource FilterCheck}">
                                        <TextBlock Text="{Binding GamesStats.Steam, Mode=OneWay, StringFormat=Steam ({0})}" />
                                    </CheckBox>

                                    <CheckBox Name="CheckFilterGOG" IsChecked="{Binding AppSettings.FilterSettings.GOG}" Style="{StaticResource FilterCheck}">
                                        <TextBlock Text="{Binding GamesStats.GOG, Mode=OneWay, StringFormat=GOG ({0})}" />
                                    </CheckBox>

                                    <CheckBox Name="CheckFilterOrigin" IsChecked="{Binding AppSettings.FilterSettings.Origin}" Style="{StaticResource FilterCheck}">
                                        <TextBlock Text="{Binding GamesStats.Origin, Mode=OneWay, StringFormat=Origin ({0})}" />
                                    </CheckBox>

                                    <CheckBox Name="CheckFilterUplay" IsChecked="{Binding AppSettings.FilterSettings.Uplay}" Style="{StaticResource FilterCheck}">
                                        <TextBlock Text="{Binding GamesStats.Uplay, Mode=OneWay, StringFormat=Uplay ({0})}" />
                                    </CheckBox>

                                    <CheckBox Name="CheckFilterBattleNet" IsChecked="{Binding AppSettings.FilterSettings.BattleNet}" Style="{StaticResource FilterCheck}">
                                        <TextBlock Text="{Binding GamesStats.BattleNet, Mode=OneWay, StringFormat=Battle.net ({0})}" />
                                    </CheckBox>

                                    <CheckBox Name="CheckFilterCustom" IsChecked="{Binding AppSettings.FilterSettings.Custom}" Style="{StaticResource FilterCheck}">
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="{DynamicResource LOCCustomLabel}" Margin="0,0,5,0" />
                                            <TextBlock Text="{Binding GamesStats.Custom, Mode=OneWay, StringFormat=({0})}" />
                                        </StackPanel>
                                    </CheckBox>

                                    <Border Height="10" />

                                    <Label Content="{DynamicResource LOCNameLabel}">
                                        <Label.Style>
                                            <Style TargetType="Label" BasedOn="{StaticResource FilterLabel}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding AppSettings.FilterSettings.Name, TargetNullValue=''}" Value="">
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <pc:SearchBox x:Name="TextFilterName" Text="{Binding AppSettings.FilterSettings.Name, Delay=500, Mode=TwoWay}" Style="{StaticResource FilterTextBox}"/>

                                    <Label Content="{DynamicResource LOCGenreLabel}">
                                        <Label.Style>
                                            <Style TargetType="Label" BasedOn="{StaticResource FilterLabel}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding AppSettings.FilterSettings.Genres, TargetNullValue=''}" Value="">
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <pc:SearchBox x:Name="TextFilterGenre" Text="{Binding AppSettings.FilterSettings.Genres, Delay=500, Mode=TwoWay, Converter={StaticResource ListToStringConverter}}" Style="{StaticResource FilterTextBox}"/>

                                    <Label Content="{DynamicResource LOCPlatformTitle}">
                                        <Label.Style>
                                            <Style TargetType="Label" BasedOn="{StaticResource FilterLabel}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Text, TargetNullValue='', ElementName=TextFilterPlatform}" Value="">
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <pc:SearchBox x:Name="TextFilterPlatform" Text="{Binding AppSettings.FilterSettings.Platforms, Delay=500, Mode=TwoWay, Converter={StaticResource ListToStringConverter}}" Style="{StaticResource FilterTextBox}"/>

                                    <Label Content="{DynamicResource LOCGameReleaseDateTitle}">
                                        <Label.Style>
                                            <Style TargetType="Label" BasedOn="{StaticResource FilterLabel}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Text, TargetNullValue='', ElementName=TextFilterReleaseDate}" Value="">
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <pc:SearchBox x:Name="TextFilterReleaseDate" Text="{Binding AppSettings.FilterSettings.ReleaseDate, Delay=500, Mode=TwoWay}" Style="{StaticResource FilterTextBox}"/>

                                    <Label Content="{DynamicResource LOCDeveloperLabel}">
                                        <Label.Style>
                                            <Style TargetType="Label" BasedOn="{StaticResource FilterLabel}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Text, TargetNullValue='', ElementName=TextFilterDeveloper}" Value="">
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <pc:SearchBox x:Name="TextFilterDeveloper" Text="{Binding AppSettings.FilterSettings.Developers, Delay=500, Mode=TwoWay, Converter={StaticResource ListToStringConverter}}" Style="{StaticResource FilterTextBox}"/>

                                    <Label Content="{DynamicResource LOCPublisherLabel}">
                                        <Label.Style>
                                            <Style TargetType="Label" BasedOn="{StaticResource FilterLabel}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Text, TargetNullValue='', ElementName=TextFilterPublisher}" Value="">
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <pc:SearchBox x:Name="TextFilterPublisher" Text="{Binding AppSettings.FilterSettings.Publishers, Delay=500, Mode=TwoWay, Converter={StaticResource ListToStringConverter}}" Style="{StaticResource FilterTextBox}"/>

                                    <Label Content="{DynamicResource LOCCategoryLabel}">
                                        <Label.Style>
                                            <Style TargetType="Label" BasedOn="{StaticResource FilterLabel}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Text, TargetNullValue='', ElementName=TextFilterCategory}" Value="">
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <pc:SearchBox x:Name="TextFilterCategory" Text="{Binding AppSettings.FilterSettings.Categories, Delay=500, Mode=TwoWay, Converter={StaticResource ListToStringConverter}}" Style="{StaticResource FilterTextBox}"/>

                                    <Label Content="{DynamicResource LOCTagLabel}">
                                        <Label.Style>
                                            <Style TargetType="Label" BasedOn="{StaticResource FilterLabel}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Text, TargetNullValue='', ElementName=TextFilterTag}" Value="">
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <pc:SearchBox x:Name="TextFilterTag" Text="{Binding AppSettings.FilterSettings.Tags, Delay=500, Mode=TwoWay, Converter={StaticResource ListToStringConverter}}" Style="{StaticResource FilterTextBox}"/>

                                    <Label Content="{DynamicResource LOCSeriesLabel}">
                                        <Label.Style>
                                            <Style TargetType="Label" BasedOn="{StaticResource FilterLabel}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Text, TargetNullValue='', ElementName=TextFilterSeries}" Value="">
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <pc:SearchBox x:Name="TextFilterSeries" Text="{Binding AppSettings.FilterSettings.Series, Delay=500, Mode=TwoWay}" Style="{StaticResource FilterTextBox}"/>

                                    <Label Content="{DynamicResource LOCRegionLabel}">
                                        <Label.Style>
                                            <Style TargetType="Label" BasedOn="{StaticResource FilterLabel}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Text, TargetNullValue='', ElementName=TextFilterRegion}" Value="">
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <pc:SearchBox x:Name="TextFilterRegion" Text="{Binding AppSettings.FilterSettings.Region, Delay=500, Mode=TwoWay}" Style="{StaticResource FilterTextBox}"/>

                                    <Label Content="{DynamicResource LOCSourceLabel}">
                                        <Label.Style>
                                            <Style TargetType="Label" BasedOn="{StaticResource FilterLabel}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Text, TargetNullValue='', ElementName=TextFilterSource}" Value="">
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <pc:SearchBox x:Name="TextFilterSource" Text="{Binding AppSettings.FilterSettings.Source, Delay=500, Mode=TwoWay}" Style="{StaticResource FilterTextBox}"/>

                                    <Label Content="{DynamicResource LOCAgeRatingLabel}">
                                        <Label.Style>
                                            <Style TargetType="Label" BasedOn="{StaticResource FilterLabel}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Text, TargetNullValue='', ElementName=TextFilterAgeRating}" Value="">
                                                        <Setter Property="Opacity" Value="0.6"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <pc:SearchBox x:Name="TextFilterAgeRating" Text="{Binding AppSettings.FilterSettings.AgeRating, Delay=500, Mode=TwoWay}" Style="{StaticResource FilterTextBox}"/>
                                </StackPanel>
                            </ScrollViewer>
                        </DockPanel>
                    </Border>

                    <TabControl Name="TabControlView" DockPanel.Dock="Left" TabStripPlacement="Bottom"
                                SelectedIndex="{Binding AppSettings.ViewSettings.GamesViewType, Converter={StaticResource BidirectionalEnumAndNumberConverter}}">
                        <TabItem Header="{DynamicResource LOCListLabel}" >
                            <DockPanel>
                                <pc:ExtendedListBox SelectionMode="Extended" BorderThickness="0,0,1,0"
                                                    BorderBrush="{DynamicResource NormalBorderBrush}" Width="310"
                                         ItemsSource="{Binding GamesView.CollectionView}"
                                         SelectedItem="{Binding SelectedGame, Mode=TwoWay}"
                                         SelectedItemsList="{Binding SelectedGamesBinder, Mode=TwoWay}"
                                         DockPanel.Dock="Left" ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                         ScrollViewer.PanningMode="VerticalOnly"
                                         pui:ScrollToSelectedBehavior.Enabled="True"
                                         VirtualizingPanel.CacheLengthUnit="Item" VirtualizingPanel.CacheLength="5"
                                         VirtualizingPanel.IsVirtualizingWhenGrouping="True" VirtualizingPanel.VirtualizationMode="Recycling">
                                    <ListBox.InputBindings>
                                        <KeyBinding Command="{Binding EditSelectedGamesCommand}"
                                                    Key ="{Binding EditSelectedGamesCommand.Gesture.Key}"
                                                    Modifiers="{Binding EditSelectedGamesCommand.Gesture.Modifiers}" />
                                        <KeyBinding Command="{Binding RemoveSelectedGamesCommand}"
                                                    Key ="{Binding RemoveSelectedGamesCommand.Gesture.Key}"
                                                    Modifiers="{Binding RemoveSelectedGamesCommand.Gesture.Modifiers}" />
                                        <KeyBinding Command="{Binding StartSelectedGameCommand}"
                                                    Key ="{Binding StartSelectedGameCommand.Gesture.Key}"
                                                    Modifiers="{Binding StartSelectedGameCommand.Gesture.Modifiers}" />
                                    </ListBox.InputBindings>
                                    <ListBox.ItemContainerStyle>
                                        <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=ShowIconsOnList, Source={x:Static shared:Settings.Instance}}" Value="False">
                                                    <Setter Property="Padding" Value="3,5,3,5" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsInstalled}" Value="True">
                                                    <Setter Property="Foreground" Value="{StaticResource TextBrush}" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsInstalled}" Value="False">
                                                    <Setter Property="Foreground" Value="{StaticResource TextBrushDarker}" />
                                                </DataTrigger>
                                                <Trigger Property="IsSelected" Value="True">
                                                    <Setter Property="Foreground" Value="{StaticResource TextBrushDark}" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ListBox.ItemContainerStyle>
                                    <ListBox.ContextMenu>
                                        <pc:GameMenu DataContext="{Binding Data.SelectedGames, Source={StaticResource Proxy}}" />
                                    </ListBox.ContextMenu>
                                    <ListBox.GroupStyle>
                                        <GroupStyle>
                                            <GroupStyle.ContainerStyle>
                                                <Style TargetType="{x:Type GroupItem}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate>
                                                                <Expander Header="{Binding Mode=OneWay}" BorderThickness="0"
                                                                          pui:ExpanderBehaviors.SaveState="True"
                                                                          pui:ExpanderBehaviors.SaveStateId="{Binding Name, Mode=OneWay}">
                                                                    <ItemsPresenter />
                                                                </Expander>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </GroupStyle.ContainerStyle>
                                        </GroupStyle>
                                    </ListBox.GroupStyle>
                                    <ListBox.ItemTemplate>
                                        <DataTemplate>
                                            <DockPanel Margin="1" Background="Transparent">
                                                <DockPanel.InputBindings>
                                                    <MouseBinding MouseAction="LeftDoubleClick"
                                                                  Command="{Binding Data.StartGameCommand, Source={StaticResource Proxy}}"
                                                                  CommandParameter="{Binding Game}"/>
                                                </DockPanel.InputBindings>
                                                <Image Height="32" RenderOptions.BitmapScalingMode="Fant" DockPanel.Dock="Left" Margin="0,0,8,0"
                                Visibility="{Binding Path=Data.AppSettings.ShowIconsOnList, Source={StaticResource Proxy}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                    <Image.Source>
                                                        <PriorityBinding>
                                                            <Binding Path="IconObject" IsAsync="{StaticResource AsyncImagesEnabled}" Mode="OneWay" Converter="{StaticResource NullToDependencyPropertyUnsetConverter}" />
                                                            <Binding Path="DefaultIconObject" Mode="OneWay" />
                                                        </PriorityBinding>
                                                    </Image.Source>
                                                </Image>
                                                <TextBlock Text="{Binding DisplayName, Mode=OneWay}" TextTrimming="CharacterEllipsis"
                                    VerticalAlignment="Center" DockPanel.Dock="Left" />
                                            </DockPanel>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </pc:ExtendedListBox>
                                <ContentControl DockPanel.Dock="Left" DataContext="{Binding SelectedGameDetails, Mode=OneWay}"
                                                Template="{StaticResource GameDetailsView}" />
                            </DockPanel>
                        </TabItem>
                        <TabItem Header="{DynamicResource LOCCoversLabel}" >
                            <Grid>
                                <Grid.Resources>
                                    <pui:BindingProxy x:Key="CoversProxy" Data="{Binding}" />
                                    <pui:CustomImageStringToImageConverter x:Key="CustomImageStringToImageConverter" />
                                    <pui:EnumerableNullOrEmptyToVisibilityConverter x:Key="EnumerableNullOrEmptyToVisibilityConverter" />
                                    <pui:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />
                                    <pui:NullableDateToStringConverter x:Key="NullableDateToStringConverter" />
                                    <pui:StringNullOrEmptyToVisibilityConverter x:Key="StringNullOrEmptyToVisibilityConverter" />
                                    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                                    <pui:WidthToFontSizeConverter x:Key="WidthToFontSizeConverter" />
                                    <pui:NullToDependencyPropertyUnsetConverter x:Key="NullToDependencyPropertyUnsetConverter" />
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <pc:ExtendedListBox Grid.Row="0" Grid.Column="0"
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled" x:Name="ItemsView"
                      ScrollViewer.PanningMode="VerticalOnly" SelectionMode="Extended"
                      pui:ScrollToSelectedBehavior.Enabled="True" BorderThickness="0"                      
                      ItemsSource="{Binding GamesView.CollectionView}"
                      SelectedItem="{Binding SelectedGame, Mode=TwoWay}"
                      SelectedItemsList="{Binding SelectedGamesBinder, Mode=TwoWay}">
                                    <pc:ExtendedListBox.InputBindings>
                                        <KeyBinding Command="{Binding EditSelectedGamesCommand}"
                                Key ="{Binding EditSelectedGamesCommand.Gesture.Key}"
                                Modifiers="{Binding EditSelectedGamesCommand.Gesture.Modifiers}" />
                                        <KeyBinding Command="{Binding RemoveSelectedGamesCommand}"
                                Key ="{Binding RemoveSelectedGamesCommand.Gesture.Key}"
                                Modifiers="{Binding RemoveSelectedGamesCommand.Gesture.Modifiers}" />
                                        <KeyBinding Command="{Binding StartSelectedGameCommand}"
                                Key ="{Binding StartSelectedGameCommand.Gesture.Key}"
                                Modifiers="{Binding StartSelectedGameCommand.Gesture.Modifiers}" />
                                    </pc:ExtendedListBox.InputBindings>
                                    <pc:ExtendedListBox.ContextMenu>
                                        <pc:GameMenu DataContext="{Binding Data.SelectedGames, Source={StaticResource CoversProxy}}" />
                                    </pc:ExtendedListBox.ContextMenu>
                                    <pc:ExtendedListBox.Resources>
                                        <Style TargetType="GridViewColumnHeader">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </Style>
                                        <Style TargetType="ListBoxItem">
                                            <Setter Property="Margin" Value="8"/>
                                            <Setter Property="OverridesDefaultStyle" Value="True" />
                                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                        <Grid Background="Transparent">
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition Height="*" />
                                                                <RowDefinition Height="Auto" />
                                                            </Grid.RowDefinitions>
                                                            <Border x:Name="SelectionBorder" SnapsToDevicePixels="True" BorderThickness="2"
                                                Background="Transparent" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                Grid.Row="0">
                                                                <Border.Effect>
                                                                    <DropShadowEffect BlurRadius="5" Color="#DD000000" ShadowDepth="5"
                                                              x:Name="ShadowEffect"/>
                                                                </Border.Effect>
                                                                <Grid>
                                                                    <Grid.InputBindings>
                                                                        <MouseBinding MouseAction="LeftDoubleClick"
                                                                    Command="{Binding Data.StartGameCommand, Source={StaticResource CoversProxy}}"
                                                                    CommandParameter="{Binding Game}"/>
                                                                    </Grid.InputBindings>
                                                                    <Image RenderOptions.BitmapScalingMode="Fant" StretchDirection="Both">
                                                                        <Image.Source>
                                                                            <PriorityBinding>
                                                                                <Binding Path="ImageObject" IsAsync="{StaticResource AsyncImagesEnabled}" Mode="OneWay" Converter="{StaticResource NullToDependencyPropertyUnsetConverter}" />
                                                                                <Binding Path="DefaultImageObject" Mode="OneWay" />
                                                                            </PriorityBinding>
                                                                        </Image.Source>
                                                                    </Image>
                                                                    <Border Background="#99000000" x:Name="TextGameName" Visibility="Collapsed">
                                                                        <TextBlock Text="{Binding DisplayName, Mode=OneWay}" TextWrapping="Wrap" Margin="5"
                                                                Style="{StaticResource BaseTextBlockStyle}"
                                                                TextTrimming="CharacterEllipsis" TextAlignment="Center"
                                                                HorizontalAlignment="Center" VerticalAlignment="Center"
                                                                FontSize="{Binding Path=Value, ElementName=SliderZoom, Converter={StaticResource WidthToFontSizeConverter}}"/>
                                                                    </Border>
                                                                    <Border Background="#88000000" x:Name="BorderMouseOver" Visibility="Collapsed">
                                                                        <Grid Margin="10" VerticalAlignment="Center">
                                                                            <Grid.ColumnDefinitions>
                                                                                <ColumnDefinition Width="*" />
                                                                                <ColumnDefinition Width="*" />
                                                                            </Grid.ColumnDefinitions>
                                                                            <Grid.RowDefinitions>
                                                                                <RowDefinition Height="Auto" />
                                                                            </Grid.RowDefinitions>
                                                                            <Button Background="#EE000000" Content="▶"
                                                                Grid.Row="0" Grid.Column="0" Margin="0,0,3,0"                                                            
                                                                FontSize="{Binding Path=Value, ElementName=SliderZoom, Converter={StaticResource WidthToFontSizeConverter}}"
                                                                Command="{Binding Data.StartGameCommand, Source={StaticResource CoversProxy}}"
                                                                CommandParameter="{Binding Game}" />
                                                                            <Button Background="#EE000000" Content="ℹ"
                                                                Grid.Row="0" Grid.Column="1" Margin="3,0,0,0" 
                                                                FontSize="{Binding Path=Value, ElementName=SliderZoom, Converter={StaticResource WidthToFontSizeConverter}}"
                                                                Command="{Binding Data.ShowGameSideBarCommand, Source={StaticResource CoversProxy}}"
                                                                CommandParameter="{Binding}"/>
                                                                        </Grid>
                                                                    </Border>
                                                                </Grid>
                                                            </Border>
                                                            <TextBlock Text="{Binding Name}" Style="{DynamicResource BaseTextBlockStyle}"
                                                   TextAlignment="Center" TextTrimming="CharacterEllipsis" 
                                                   Margin="0,10,0,0" Grid.Row="1"
                                                   Visibility="{Binding Data.AppSettings.ShowNamesUnderCovers, Source={StaticResource CoversProxy}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding Image}" Value="{x:Null}" />
                                                                    <Condition Binding="{Binding Path=Data.AppSettings.ShowNameEmptyCover, Source={StaticResource CoversProxy}}" Value="True" />
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Visibility" Value="Visible" TargetName="TextGameName"/>
                                                            </MultiDataTrigger>
                                                            <Trigger Property="IsSelected" Value="True">
                                                                <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="SelectionBorder"/>
                                                            </Trigger>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Visibility" Value="Visible" TargetName="BorderMouseOver"/>
                                                                <Setter Property="BorderBrush" Value="{DynamicResource GlyphBrush}" TargetName="SelectionBorder"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </pc:ExtendedListBox.Resources>
                                    <pc:ExtendedListBox.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <pui:VirtualizingTilePanel ItemWidth="{Binding Path=Value, ElementName=SliderZoom}"
                                                   ItemHeightModifier="{DynamicResource GameCoverViewRation}"/>
                                        </ItemsPanelTemplate>
                                    </pc:ExtendedListBox.ItemsPanel>
                                </pc:ExtendedListBox>

                                <Border Grid.Column="0" Grid.Row="1"
                    BorderThickness="0,1,0,0" BorderBrush="{StaticResource NormalBorderBrush}">
                                    <StackPanel Margin="5" Orientation="Horizontal">
                                        <Label Content="{DynamicResource LOCZoomLabel}" DockPanel.Dock="Right" Margin="10,0,10,0"/>
                                        <Slider Name="SliderZoom" SmallChange="1" Value="{Binding Path=AppSettings.ViewSettings.CoversZoom}" Maximum="260" Minimum="100"
                            IsSnapToTickEnabled="True" Width="150" DockPanel.Dock="Right" VerticalAlignment="Center"/>
                                    </StackPanel>
                                </Border>

                                <ScrollViewer Grid.Column="2" Grid.Row="0" Grid.RowSpan="2" Width="350"
                          HorizontalScrollBarVisibility="Disabled"
                          DataContext="{Binding SelectedGameDetails, Mode=OneWay}"
                          Visibility="{Binding Data.ShowGameSidebar, Converter={StaticResource BooleanToVisibilityConverter}, Source={StaticResource CoversProxy}}">
                                    <Border BorderThickness="1,0,0,0" BorderBrush="{StaticResource NormalBorderBrush}">
                                        <Grid>
                                            <Grid.Resources>
                                                <pui:BindingProxy x:Key="Proxy" Data="{Binding}" />
                                            </Grid.Resources>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                            </Grid.RowDefinitions>

                                            <TextBlock HorizontalAlignment="Right" VerticalAlignment="Top"
                                   Margin="10">
                            <Hyperlink Command="{Binding Data.CloseGameSideBarCommand, Source={StaticResource CoversProxy}}">
                                <Run Text="r" FontFamily="Marlett" />
                            </Hyperlink>
                                            </TextBlock>

                                            <DockPanel Grid.Column="0" Grid.Row="0" Margin="10,20,10,0">
                                                <Image DockPanel.Dock="Left" MaxHeight="32" MaxWidth="32" RenderOptions.BitmapScalingMode="Fant"
                                   Source="{Binding Game.IconObject, Mode=OneWay}" />
                                                <TextBlock Text="{Binding Game.DisplayName, Mode=OneWay}" FontSize="20" Margin="10,10,0,10" TextWrapping="Wrap"
                                   DockPanel.Dock="Left" VerticalAlignment="Center" Foreground="{StaticResource TextBrush}">
                                                    <TextBlock.Effect>
                                                        <DropShadowEffect ShadowDepth="3"/>
                                                    </TextBlock.Effect>
                                                </TextBlock>
                                            </DockPanel>

                                            <StackPanel Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1"
                                Margin="10,20,10,0" Orientation="Horizontal" Height="35">
                                                <Button MinWidth="120" Content="{DynamicResource LOCPlayGame}" Style="{StaticResource PlayButton}"
                                Visibility="{Binding IsPlayAvailable, Converter={StaticResource BooleanToVisibilityConverter}}"
                                Command="{Binding PlayCommand}"/>
                                                <Button MinWidth="120" Content="{DynamicResource LOCInstallGame}"
                                Visibility="{Binding IsInstallAvailable, Converter={StaticResource BooleanToVisibilityConverter}}"
                                Command="{Binding InstallCommand}"/>
                                                <Button MinWidth="120" Content="{DynamicResource LOCSetupRunning}"
                                Visibility="{Binding IsInstalling, Converter={StaticResource BooleanToVisibilityConverter}}"
                                Command="{Binding CheckSetupCommand}"/>
                                                <Button MinWidth="120" Content="{DynamicResource LOCUninstalling}"  
                                Visibility="{Binding IsUninstalling, Converter={StaticResource BooleanToVisibilityConverter}}"
                                Command="{Binding CheckSetupCommand}"/>
                                                <Button MinWidth="120" Content="{DynamicResource LOCGameRunning}" 
                                Visibility="{Binding IsRunning, Converter={StaticResource BooleanToVisibilityConverter}}"
                                Command="{Binding CheckExecutionCommand}"/>
                                                <Button MinWidth="120" Content="{DynamicResource LOCGameLaunching}"
                                Visibility="{Binding IsLaunching, Converter={StaticResource BooleanToVisibilityConverter}}"
                                Command="{Binding CheckExecutionCommand}"/>
                                                <Button MinWidth="120" Content="{DynamicResource LOCMoreAction}"
                                Margin="15,0,0,0" pui:LeftClickContextMenuBehavior.Enabled="True">
                                                    <Button.ContextMenu>
                                                        <pc:GameMenu Placement="Bottom" DataContext="{Binding Data.Game, Source={StaticResource Proxy}}"
                                             ShowStartSection="False" />
                                                    </Button.ContextMenu>
                                                </Button>
                                            </StackPanel>

                                            <Border Grid.Column="0" Grid.Row="2" Margin="10,20,10,0">
                                                <Border.Style>
                                                    <Style TargetType="Border">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Game.Playtime}" Value="0">
                                                                <Setter Property="Visibility" Value="Collapsed" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Border.Style>
                                                <ContentControl Template="{StaticResource PlayTimeInfoView}"  />
                                            </Border>

                                            <ContentControl Grid.Column="0" Grid.Row="3" Margin="10,20,10,0"
                                        Visibility="{Binding ShowInfoPanel, Converter={StaticResource BooleanToVisibilityConverter}}"
                                        Template="{StaticResource GamePropertiesView}" />

                                            <pc:HtmlTextView Grid.Column="0" Grid.Row="4" Margin="5,10,5,10" 
                                        Background="Transparent" HtmlText="{Binding Game.Description, Mode=OneWay}"
                                        HtmlForeground="{DynamicResource TextColor}"
                                        LinkForeground="{DynamicResource GlyphColor}"
                                        ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                        ScrollViewer.VerticalScrollBarVisibility="Disabled"/>

                                        </Grid>
                                    </Border>
                                </ScrollViewer>
                            </Grid>
                        </TabItem>
                        <TabItem Header="{DynamicResource LOCDetailsLabel}">
                            <pc:GamesGridView ItemsSource="{Binding GamesView.CollectionView}"
                                              SelectedItem="{Binding SelectedGame, Mode=TwoWay}"
                                              SelectedItemsList="{Binding SelectedGamesBinder, Mode=TwoWay}"
                                              AppSettings="{Binding AppSettings}" />
                        </TabItem>
                    </TabControl>
                </DockPanel>
            </Border>

            <Border Margin="0,-38,0,0" Height="38" Width="100" DockPanel.Dock="Bottom" Background="Transparent"
                    Grid.Row="2" Grid.Column="0" HorizontalAlignment="Right">
                <Button Name="ButtonFriends" Command="{Binding OpenSteamFriendsCommand}"
                        Height="30" Width="30" HorizontalAlignment="Right" Margin="0,0,15,0"
                        Style="{StaticResource ImageHighlightButton}" ToolTip="{DynamicResource LOCSteamFriendsTooltip}"
                        Visibility="{Binding AppSettings.SteamSettings.IntegrationEnabled, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Button.OpacityMask>
                        <ImageBrush ImageSource="/Images/friends.png" RenderOptions.BitmapScalingMode="Fant"/>
                    </Button.OpacityMask>
                </Button>
            </Border>
        </Grid>
    </ControlTemplate>

    <Style TargetType="{x:Type pc:MainView}">
        <Setter Property="Margin" Value="0,-25,0,0" />
        <Setter Property="Template" Value="{StaticResource MainView}"/>
    </Style>
</ResourceDictionary>
